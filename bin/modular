#!/bin/bash
# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

set -e

function follow_links() {
  cd -P "${1%/*}"
  file="$PWD/${1##*/}"
  while [ -h "$file" ]; do
    # On Mac OS, readlink -f doesn't work.
    cd -P "${file%/*}"
    file="$(readlink "$file")"
    cd -P "${file%/*}"
    file="$PWD/${file##*/}"
  done
  echo "$PWD/${file##*/}"
}

function ensure_git_repo() {
  directory="$1"
  repo="$2"
  rev="$3"

  # If the directory isn't checked out yet, check it out.
  if [ ! -d "$directory/.git" ]; then
    git clone $repo $directory
    git -C "$directory" checkout -q $rev
    return 0
  fi

  # If the directory's HEAD doesn't match the requested revision, fetch the
  # latest version of the repo and check out the requested revision.
  if [ $(git -C "$directory" rev-parse HEAD) != \
       $(git -C "$directory" rev-parse "$rev") ]; then
    git -C "$directory" fetch
    git -C "$directory" checkout $rev
    return 0
  fi

  return 1
}

PROG_NAME="$(follow_links "$BASH_SOURCE")"
BIN_DIR="$(cd "${PROG_NAME%/*}" ; pwd -P)"
export MODULAR_ROOT="$(cd "${BIN_DIR}/.." ; pwd -P)"

if [[ $(follow_links "$PWD")/ = $MODULAR_ROOT/* ]]; then
  BUILD_IN_TREE=true
else
  BUILD_IN_TREE=false
fi

FLUTTER_VERSION="$(cat $MODULAR_ROOT/FLUTTER_VERSION)"
FLUTTER_REPO=https://github.com/flutter/flutter.git
FLUTTER_DIR="$MODULAR_ROOT/third_party/flutter"

MOJO_DEVTOOLS_VERSION="$(cat $MODULAR_ROOT/MOJO_DEVTOOLS_VERSION)"
MOJO_DEVTOOLS_REPO=https://github.com/domokit/devtools.git
MOJO_DEVTOOLS_DIR="$MODULAR_ROOT/third_party/mojo_devtools"

MOJO_SDK_VERSION="$(cat $MODULAR_ROOT/MOJO_SDK_VERSION)"
MOJO_SDK_REPO=https://github.com/domokit/mojo_sdk.git
MOJO_SDK_DIR="$MODULAR_ROOT/third_party/mojo/src/mojo/public"

MOJO_VERSION="$(cat $MODULAR_ROOT/MOJO_VERSION)"

MODULAR_TOOLS_DIR="$MODULAR_ROOT/modular_tools"
SCRIPT_PATH="$MODULAR_TOOLS_DIR/lib/executable.dart"

DART_SDK_PATH="$FLUTTER_DIR/bin/cache/dart-sdk"
DART="$DART_SDK_PATH/bin/dart"
PUB="$DART_SDK_PATH/bin/pub"

MOJO_BUCKET_URL="https://mojo.storage.googleapis.com"

# Download a prebuilt binary from the Mojo GCS bucket.
function download_prebuilt() {
  remote_path="$1"
  local_path="$2"
  curl -o "$local_path" "$MOJO_BUCKET_URL/$remote_path"
}

(
  if hash flock 2>/dev/null; then
    # ensures that we don't simultaneously update deps in multiple parallel
    # instances
    flock 3
    # some platforms (e.g. Mac) don't have flock or any reliable alternative
  fi

  CONFIGURE_MODULAR=false

  # Make sure flutter is up to date.
  if ensure_git_repo $FLUTTER_DIR $FLUTTER_REPO $FLUTTER_VERSION; then
    # Link flutter into the modular_flutter package
    FLUTTER_CACHE="$MODULAR_ROOT/dart-packages/modular_flutter/lib/cache"
    rm -f "$FLUTTER_CACHE/.flutter_root"
    mkdir -p "$FLUTTER_CACHE"
    ln -s "$FLUTTER_DIR" "$FLUTTER_CACHE/.flutter_root"
    # precache flutter stuff
    $FLUTTER_DIR/bin/flutter precache
    # symlink dart binaries into bin/
    for command in dart dartanalyzer dartfmt dartdoc pub
    do
      if [ ! -f "$MODULAR_ROOT/bin/$command" ]; then
        ln -s "$DART_SDK_PATH/bin/$command" "$MODULAR_ROOT/bin/"
      fi
    done
    # remember to configure modular
    CONFIGURE_MODULAR=true
  fi

  # Make sure mojo devtools are up to date
  if ensure_git_repo $MOJO_DEVTOOLS_DIR $MOJO_DEVTOOLS_REPO \
      $MOJO_DEVTOOLS_VERSION
  then
    # remember to configure modular
    CONFIGURE_MODULAR=true
  fi

  # If building in the modular tree, make sure some other deps are present:
  if [ "$BUILD_IN_TREE" == "true" ]; then
    # Mojo SDK
    if ensure_git_repo $MOJO_SDK_DIR $MOJO_SDK_REPO $MOJO_SDK_VERSION; then
      if [ "$(uname -s)" == "Darwin" ]; then
        MOJOM_PLATFORM=mac64
      else
        MOJOM_PLATFORM=linux64
      fi

      # Download a prebuilt mojom tool.
      MOJOM_DIR="$MOJO_SDK_DIR/tools/bindings/mojom_tool/bin/$MOJOM_PLATFORM"
      MOJOM_SHA1="$(cat $MOJOM_DIR/mojom.sha1)"
      download_prebuilt "mojom_parser/$MOJOM_PLATFORM/$MOJOM_SHA1" \
          "$MOJOM_DIR/mojom"
      chmod +x "$MOJOM_DIR/mojom"
    fi
  fi

  # Download a prebuilt dart snapshotter.
  if [ "$(uname -s)" == "Darwin" ]; then
    SNAPSHOTTER_PLATFORM=mac-x64
  else
    SNAPSHOTTER_PLATFORM=linux-x64
  fi

  CACHE_BASE="$MODULAR_ROOT/dart-packages/modular/lib/cache"
  CACHE_DIR="$CACHE_BASE/$MOJO_VERSION/$SNAPSHOTTER_PLATFORM"
  if [ ! -d "$CACHE_DIR" ]; then
    mkdir -p "$CACHE_DIR"
    download_prebuilt \
        "dart_snapshotter/$MOJO_VERSION/$SNAPSHOTTER_PLATFORM.zip" \
        "$CACHE_DIR/dart_snapshotter.zip"
    unzip -d "$CACHE_DIR/" "$CACHE_DIR/dart_snapshotter.zip"
    rm -f "$CACHE_DIR/dart_snapshotter.zip"
  fi

  if [ "$CONFIGURE_MODULAR" == "true" ]; then
    # Run `pub get` in a few key places...
    (cd $MODULAR_TOOLS_DIR && $PUB get)
    (cd $MODULAR_ROOT/indexer/pipeline && $PUB get)

    if [ "$BUILD_IN_TREE" == "true" ]; then
      # Run pub get
      export PATH=$DART_SDK_PATH/bin:$PATH
      $MODULAR_ROOT/modular_tools/run_pub.py get --incremental
    fi
  fi
) 3< $PROG_NAME


set +e
exec "$DART" "$SCRIPT_PATH" "$@"
