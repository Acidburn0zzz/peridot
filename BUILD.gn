# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//packages/package.gni")

config("internal") {
  include_dirs = [
    ".",
    "$root_gen_dir/peridot",
  ]
}

package("maxwell") {
  deps = [
    "//peridot/bin/action_log",
    "//peridot/bin/context_engine",
    "//peridot/bin/module_resolver",
    "//peridot/bin/suggestion_engine",
    "//peridot/bin/user",
    "//peridot/bin/user:maxwell_main",
  ]

  binaries = [
    {
      name = "action_log"
    },
    {
      name = "context_engine"
    },
    {
      name = "maxwell"
      source = "maxwell_main"
    },
    {
      name = "module_resolver"
    },
    {
      name = "suggestion_engine"
    },
  ]

  resources = [
    {
      path = rebase_path("//peridot/bin/user/resources/default_config.json")
      dest = "maxwell/default_config.json"
    },
    {
      path = rebase_path("//peridot/bin/user/resources/test_config.json")
      dest = "maxwell/test_config.json"
    },
  ]
}

package("maxwell_agents") {
  testonly = true

  deps = [
    "//peridot/bin/acquirers",
    "//peridot/bin/agents",
    "//peridot/bin/agents:carmen_sandiego",
    "//peridot/bin/agents:ideas",
  ]

  binaries = [
    {
      name = "acquirers/story_info_main"
    },
    {
      name = "agents/carmen_sandiego"
    },
    {
      name = "agents/ideas"
    },
    {
      name = "agents/basic_text_listener"
      dest = "agents/maxwell_btl"
    },
    {
      name = "agents/maxwell_entity_selector"
    },
    {
      name = "agents/maxwell_proposal_maker"
    },
  ]
}

package("maxwell_tests") {
  testonly = true

  deps = [
    "//peridot/bin/context_engine:context_index_unittest",
    "//peridot/bin/context_engine:context_repository_unittest",
    "//peridot/bin/module_resolver:module_resolver_impl_unittest",
    "//peridot/lib/module_manifest_repository:module_manifest_repository_unittest",
    "//peridot/tests/maxwell_integration",
  ]

  tests = [
    {
      name = "context_index_unittest"
      dest = "maxwell/context_index_unittest"
    },
    {
      name = "context_repository_unittest"
      dest = "maxwell/context_repository_unittest"
    },
    {
      name = "module_manifest_repository_unittest"
      dest = "maxwell/module_manifest_repository_unittest"
    },
    {
      name = "module_resolver_impl_unittest"
      dest = "maxwell/module_resolver_impl_unittest"
    },
    {
      name = "context_engine_test"
      dest = "maxwell/context_engine_test"
    },
    {
      name = "suggestion_engine_test"
      dest = "maxwell/suggestion_engine_test"
    },
    {
      name = "resolver_test"
      dest = "maxwell/resolver_test"
    },
  ]
}

package("ledger") {
  deps = [
    "//peridot/bin/cloud_provider_firebase",
    "//peridot/bin/ledger",
  ]

  binaries = [
    {
      name = "cloud_provider_firebase"
    },
    {
      name = "cloud_sync"
      source = "ledger_tool"
    },

    {
      name = "ledger_tool"
    },

    {
      name = "ledger"
    },
  ]
}

package("ledger_tests") {
  testonly = true

  deps = [
    "//peridot/bin/cloud_provider_firebase:tests",
    "//peridot/bin/ledger:tests",
    "//peridot/third_party/bup:unittests",
  ]

  binaries = [
    {
      name = "launch_benchmark"
    },

    {
      name = "ledger_benchmark_convergence"
    },

    {
      name = "ledger_benchmark_put"
    },

    {
      name = "ledger_benchmark_sync"
    },
  ]
  tests = [
    {
      name = "bup_unittests"
    },
    {
      name = "cloud_provider_firebase_unittests"
    },
    {
      name = "ledger_integration_tests"
    },

    {
      name = "ledger_unittests"
    },

    {
      name = "ledger_e2e_local"
    },

    {
      name = "ledger_e2e_sync"

      # This puts ledger_e2e_sync in /system/test/disabled/.
      disabled = true
    },
    {
      name = "run_ledger_benchmarks.sh"
      disabled = true
    },
  ]

  resources = [
    {
      path = rebase_path(
              "//peridot/bin/ledger/test/benchmark/convergence/convergence.tspec")
      dest = "ledger/benchmark/convergence.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/test/benchmark/put/transaction.tspec")
      dest = "ledger/benchmark/transaction.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/test/benchmark/put/entry_count.tspec")
      dest = "ledger/benchmark/entry_count.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/test/benchmark/put/entry_count_update.tspec")
      dest = "ledger/benchmark/entry_count_update.tspec"
    },

    {
      path =
          rebase_path("//peridot/bin/ledger/test/benchmark/put/key_size.tspec")
      dest = "ledger/benchmark/key_size.tspec"
    },

    {
      path = rebase_path("//peridot/bin/ledger/test/benchmark/put/put.tspec")
      dest = "ledger/benchmark/put.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/test/benchmark/put/transaction_size.tspec")
      dest = "ledger/benchmark/transaction_size.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/test/benchmark/put/value_size.tspec")
      dest = "ledger/benchmark/value_size.tspec"
    },

    {
      path = rebase_path("//peridot/bin/ledger/test/benchmark/sync/sync.tspec")
      dest = "ledger/benchmark/sync.tspec"
    },
  ]
}

package("modular") {
  testonly = true

  deps = [
    "bin",
  ]

  binaries = [
    {
      name = "device_runner"
    },
    {
      name = "device_runner_monitor"
    },
    {
      name = "user_runner"
    },
  ]
}

package("modular_dev") {
  testonly = true

  deps = [
    "bin",
  ]

  binaries = [
    {
      name = "dev_user_shell"
    },
    {
      name = "dev_device_shell"
    },
    {
      name = "dev_story_shell"
    },
  ]
}

executable("modular_unittests_bin") {
  output_name = "modular_unittests"

  testonly = true

  deps = [
    "//garnet/public/lib/test_runner/cpp:gtest_main",
    "//peridot/bin/agent_runner:unittests",
    "//peridot/bin/device_runner:unittests",
    "//peridot/bin/entity:unittests",
    "//peridot/bin/story_runner:unittests",
    "//peridot/examples/counter_cpp:unittests",
    "//peridot/lib:unittests",
  ]
}

package("modular_unittests") {
  testonly = true

  deps = [
    ":modular_unittests_bin",
  ]

  tests = [ {
        name = "modular_unittests"
      } ]
}
