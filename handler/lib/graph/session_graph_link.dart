// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'package:modular_core/uuid.dart' show Uuid;
import 'package:modular_core/graph/graph.dart' show Node;
import 'package:modular_core/graph/query/query.dart' show GraphQuery;

import 'impl/session_graph_link_impl.dart' show SerializableSessionGraphLink;

/// [SessionGraphLink] is a descriptive token that is created by
/// [SessionGraph.addLink], and is obtainable via  [SessionGraph.links]).
/// It can be used to unlink a Graph via [SessionGraph.removeLink].
abstract class SessionGraphLink {
  /// Construct an instance of [SerializableSessionGraphLink], which is the only
  /// class that implements the [SessionGraphLink] interface.
  // TODO(jjosh): document the args. Revisit naming?
  factory SessionGraphLink(Uuid sessionId, GraphQuery query, Node originNode,
          Iterable<String> labels) =>
      new SerializableSessionGraphLink(sessionId, query, originNode, labels);

  /// Uniquely identifies this [SessionGraphLink].
  Uuid get linkId;

  /// Identifies the [SessionGraph] that should be linked to.
  Uuid get sessionId;

  /// Used to filter the linked [SessionGraph].
  GraphQuery get query;

  /// For each [GraphQueryMatch] generated by [query], a new [Edge] is
  /// synthesized between [originNode] and the root of the match (this [Edge] is
  /// labeled with [labels]).
  Node get originNode;

  /// For each [GraphQueryMatch] generated by [query], a new [Edge] is
  /// synthesized between [originNode] and the root of the match (this [Edge] is
  /// labeled with [labels]).
  Iterable<String> get labels;
}
