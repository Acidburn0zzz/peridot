// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "apps/ledger/api/ledger.mojom";
import "apps/mozart/services/views/interfaces/view_token.mojom";

/*
 * This file contains definitions of interfaces and data structures to access
 * the Story Manager.
 */

// Intended for use by Device Runner to launch a new Story Manager per user.
[ServiceName="modular.StoryManager"]
interface StoryManager {
  // Used to launch story-manager for a particular user, identified by
  // |user_id|. Returns false if there is a problem with |user_id| or |Launch|
  // has already been called. If successful, returns the view associated with
  // this story manager.
  Launch(ledger.Identity user_id, mozart.ViewOwner& view_owner) =>
      (bool success);
};

struct StoryInfo {
  // URL of the first mojo application run as a part of this story. Typically
  // this will be the URL of the recipe.
  string url;

  // Whether this story is running on this device.
  bool is_running;

  // Page id on the user's ledger which stores session information. It might be
  // NULL until the session is being started.
  array<uint8, 16>? session_page_id;
};

// Intended for use by SysUi to interact with a single story.
interface Story {
  GetInfo() => (StoryInfo info);

  // Runs this |Story| if not running, else does nothing. |view_owner| is an
  // interface request for the root view of this story.
  //
  // TODO(alhaad): Also register a watcher here to push updates regarding this
  // story.
  Start(mozart.ViewOwner& view_owner);

  // Stops this |Story| if it is running - committing all story data to Ledger,
  // else does nothing.
  Stop();
};

// Intended for use by SysUi to create a new story by URL or to get a list of
// previously run stories which can be resumed.
// If |StoryProvider| is closed, all associated |Story| objects will have an
// undefined behavior.
interface StoryProvider {
  // Creates a new story by running the module at |url|. Returns an interface to
  // |Story| if the story could be successfully created else return NULL.
  CreateStory(string url) => (Story? story);

  // Returns interfaces to all the previously run stories for the user.
  // HACK(alhaad): Return only one of the previous stories until
  // https://github.com/domokit/mojo/issues/818 is fixed.
  PreviousStories() => (/*array<Story>*/Story? stories);
};

// This interface is meant to be implemented by a User Shell so that
// |StoryProvider| could be passed to it on startup.
[ServiceName="modular.UserShell"]
interface UserShell {
  SetStoryProvider(StoryProvider service);
};
