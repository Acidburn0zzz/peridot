// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module story_manager;

import "apps/ledger/api/ledger.mojom";

/*
 * This file contains definitions of interfaces and data structures to access
 * the Story Manager.
 */

// Intended for use by Device Runner to launch a new Story Manager per user.
[ServiceName="story_manager::StoryManager"]
interface StoryManager {
  // Used to launch story-manager for a particular user, identified by
  // |user_id|. Returns false if there is a problem with |user_id| or |Launch|
  // has already been called.
  Launch(ledger.Identity user_id) => (bool success);
};

// Intended for use by SysUi to start a new story by URL or to get a list of
// previously run stories which can be resumed.
interface StoryProvider {
  // Starts a new story by running the module at |url|. Returns an interface to
  // |Story| if the story could be successfully started else return NULL.
  StartNewStory(string url) => (Story? story);
  // TODO(alhaad): Add more actions like CurrentStories(), PreviousStories().
};

struct StoryMetadata {
  string url;
  bool is_running;
  // TODO(alhaad): Add more things like statistics and snapshots.
};

// Intended for use by SysUi to interact with a single story.
interface Story {
  GetMetadata() => (StoryMetadata metadata);
  // TODO(alhaad): Add more actions like Background(), Foreground(), Stop(),
  // Resume(), etc.
};

// This interface is meant to be implemented by a User Shell so that
// |StoryProvider| could be passed to it on startup.
[ServiceName="story_manager::UserShell"]
interface UserShell {
  SetStoryProvider(StoryProvider service);
};
