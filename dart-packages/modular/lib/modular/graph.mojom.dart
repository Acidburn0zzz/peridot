// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library graph_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class GraphEvent extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  List<int> id = null;
  List<GraphMutation> mutations = null;

  GraphEvent() : super(kVersions.last.size);

  GraphEvent.init(
    List<int> this.id, 
    List<GraphMutation> this.mutations
  ) : super(kVersions.last.size);

  static GraphEvent deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static GraphEvent decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    GraphEvent result = new GraphEvent();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      result.id = decoder0.decodeUint8Array(8, bindings.kNothingNullable, 16);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, false);
      {
        var si1 = decoder1.decodeDataHeaderForUnionArray(bindings.kUnspecifiedArrayLength);
        result.mutations = new List<GraphMutation>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
            result.mutations[i1] = GraphMutation.decode(decoder1, bindings.ArrayDataHeader.kHeaderSize + bindings.kUnionSize * i1);
            if (result.mutations[i1] == null) {
              throw new bindings.MojoCodecError(
                'Trying to decode null union for non-nullable GraphMutation.');
            }
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeUint8Array(id, 8, bindings.kNothingNullable, 16);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "id of struct GraphEvent: $e";
      rethrow;
    }
    try {
      if (mutations == null) {
        encoder0.encodeNullPointer(16, false);
      } else {
        var encoder1 = encoder0.encodeUnionArray(mutations.length, 16, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < mutations.length; ++i0) {
          encoder1.encodeUnion(mutations[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kUnionSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "mutations of struct GraphEvent: $e";
      rethrow;
    }
  }

  String toString() {
    return "GraphEvent("
           "id: $id" ", "
           "mutations: $mutations" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["id"] = id;
    map["mutations"] = mutations;
    return map;
  }
}


class NodeMutation extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  String nodeId = null;

  NodeMutation() : super(kVersions.last.size);

  NodeMutation.init(
    String this.nodeId
  ) : super(kVersions.last.size);

  static NodeMutation deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static NodeMutation decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    NodeMutation result = new NodeMutation();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      result.nodeId = decoder0.decodeString(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeString(nodeId, 8, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "nodeId of struct NodeMutation: $e";
      rethrow;
    }
  }

  String toString() {
    return "NodeMutation("
           "nodeId: $nodeId" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["nodeId"] = nodeId;
    return map;
  }
}


class EdgeMutation extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(40, 0)
  ];
  String edgeId = null;
  String originNodeId = null;
  String targetNodeId = null;
  List<String> labels = null;

  EdgeMutation() : super(kVersions.last.size);

  EdgeMutation.init(
    String this.edgeId, 
    String this.originNodeId, 
    String this.targetNodeId, 
    List<String> this.labels
  ) : super(kVersions.last.size);

  static EdgeMutation deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static EdgeMutation decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    EdgeMutation result = new EdgeMutation();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      result.edgeId = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.originNodeId = decoder0.decodeString(16, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.targetNodeId = decoder0.decodeString(24, false);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(32, false);
      {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.labels = new List<String>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          result.labels[i1] = decoder1.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeString(edgeId, 8, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "edgeId of struct EdgeMutation: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(originNodeId, 16, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "originNodeId of struct EdgeMutation: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(targetNodeId, 24, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "targetNodeId of struct EdgeMutation: $e";
      rethrow;
    }
    try {
      if (labels == null) {
        encoder0.encodeNullPointer(32, false);
      } else {
        var encoder1 = encoder0.encodePointerArray(labels.length, 32, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < labels.length; ++i0) {
          encoder1.encodeString(labels[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "labels of struct EdgeMutation: $e";
      rethrow;
    }
  }

  String toString() {
    return "EdgeMutation("
           "edgeId: $edgeId" ", "
           "originNodeId: $originNodeId" ", "
           "targetNodeId: $targetNodeId" ", "
           "labels: $labels" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["edgeId"] = edgeId;
    map["originNodeId"] = originNodeId;
    map["targetNodeId"] = targetNodeId;
    map["labels"] = labels;
    return map;
  }
}


class NodeValueMutation extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  String nodeId = null;
  String key = null;
  List<int> newValue = null;

  NodeValueMutation() : super(kVersions.last.size);

  NodeValueMutation.init(
    String this.nodeId, 
    String this.key, 
    List<int> this.newValue
  ) : super(kVersions.last.size);

  static NodeValueMutation deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static NodeValueMutation decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    NodeValueMutation result = new NodeValueMutation();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      result.nodeId = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.key = decoder0.decodeString(16, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.newValue = decoder0.decodeUint8Array(24, bindings.kArrayNullable, bindings.kUnspecifiedArrayLength);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeString(nodeId, 8, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "nodeId of struct NodeValueMutation: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(key, 16, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "key of struct NodeValueMutation: $e";
      rethrow;
    }
    try {
      encoder0.encodeUint8Array(newValue, 24, bindings.kArrayNullable, bindings.kUnspecifiedArrayLength);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "newValue of struct NodeValueMutation: $e";
      rethrow;
    }
  }

  String toString() {
    return "NodeValueMutation("
           "nodeId: $nodeId" ", "
           "key: $key" ", "
           "newValue: $newValue" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["nodeId"] = nodeId;
    map["key"] = key;
    map["newValue"] = newValue;
    return map;
  }
}


class _GraphAddObserverParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  GraphObserverInterface observer = null;

  _GraphAddObserverParams() : super(kVersions.last.size);

  _GraphAddObserverParams.init(
    GraphObserverInterface this.observer
  ) : super(kVersions.last.size);

  static _GraphAddObserverParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _GraphAddObserverParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _GraphAddObserverParams result = new _GraphAddObserverParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      result.observer = decoder0.decodeServiceInterface(8, false, GraphObserverProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeInterface(observer, 8, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "observer of struct _GraphAddObserverParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_GraphAddObserverParams("
           "observer: $observer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _GraphApplyMutationsParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  List<GraphMutation> mutations = null;

  _GraphApplyMutationsParams() : super(kVersions.last.size);

  _GraphApplyMutationsParams.init(
    List<GraphMutation> this.mutations
  ) : super(kVersions.last.size);

  static _GraphApplyMutationsParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _GraphApplyMutationsParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _GraphApplyMutationsParams result = new _GraphApplyMutationsParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        var si1 = decoder1.decodeDataHeaderForUnionArray(bindings.kUnspecifiedArrayLength);
        result.mutations = new List<GraphMutation>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
            result.mutations[i1] = GraphMutation.decode(decoder1, bindings.ArrayDataHeader.kHeaderSize + bindings.kUnionSize * i1);
            if (result.mutations[i1] == null) {
              throw new bindings.MojoCodecError(
                'Trying to decode null union for non-nullable GraphMutation.');
            }
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      if (mutations == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encodeUnionArray(mutations.length, 8, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < mutations.length; ++i0) {
          encoder1.encodeUnion(mutations[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kUnionSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "mutations of struct _GraphApplyMutationsParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_GraphApplyMutationsParams("
           "mutations: $mutations" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["mutations"] = mutations;
    return map;
  }
}


class GraphApplyMutationsResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  GraphStatus status = null;
  String errorDescription = null;

  GraphApplyMutationsResponseParams() : super(kVersions.last.size);

  GraphApplyMutationsResponseParams.init(
    GraphStatus this.status, 
    String this.errorDescription
  ) : super(kVersions.last.size);

  static GraphApplyMutationsResponseParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static GraphApplyMutationsResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    GraphApplyMutationsResponseParams result = new GraphApplyMutationsResponseParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
        result.status = GraphStatus.decode(decoder0, 8);
        if (result.status == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable GraphStatus.');
        }
    }
    if (mainDataHeader.version >= 0) {
      
      result.errorDescription = decoder0.decodeString(16, true);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeEnum(status, 8);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "status of struct GraphApplyMutationsResponseParams: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(errorDescription, 16, true);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "errorDescription of struct GraphApplyMutationsResponseParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "GraphApplyMutationsResponseParams("
           "status: $status" ", "
           "errorDescription: $errorDescription" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["status"] = status;
    map["errorDescription"] = errorDescription;
    return map;
  }
}


class _GraphObserverOnChangeParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  List<GraphMutation> mutations = null;

  _GraphObserverOnChangeParams() : super(kVersions.last.size);

  _GraphObserverOnChangeParams.init(
    List<GraphMutation> this.mutations
  ) : super(kVersions.last.size);

  static _GraphObserverOnChangeParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _GraphObserverOnChangeParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _GraphObserverOnChangeParams result = new _GraphObserverOnChangeParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        var si1 = decoder1.decodeDataHeaderForUnionArray(bindings.kUnspecifiedArrayLength);
        result.mutations = new List<GraphMutation>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
            result.mutations[i1] = GraphMutation.decode(decoder1, bindings.ArrayDataHeader.kHeaderSize + bindings.kUnionSize * i1);
            if (result.mutations[i1] == null) {
              throw new bindings.MojoCodecError(
                'Trying to decode null union for non-nullable GraphMutation.');
            }
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      if (mutations == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encodeUnionArray(mutations.length, 8, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < mutations.length; ++i0) {
          encoder1.encodeUnion(mutations[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kUnionSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "mutations of struct _GraphObserverOnChangeParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_GraphObserverOnChangeParams("
           "mutations: $mutations" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["mutations"] = mutations;
    return map;
  }
}


class GraphObserverOnChangeResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  GraphObserverOnChangeResponseParams() : super(kVersions.last.size);

  GraphObserverOnChangeResponseParams.init(
  ) : super(kVersions.last.size);

  static GraphObserverOnChangeResponseParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static GraphObserverOnChangeResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    GraphObserverOnChangeResponseParams result = new GraphObserverOnChangeResponseParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
  }

  String toString() {
    return "GraphObserverOnChangeResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}



enum GraphMutationTag {
  nodeAdded,
  nodeRemoved,
  edgeAdded,
  edgeRemoved,
  valueChanged,
  unknown
}

class GraphMutation extends bindings.Union {
  static final _tagToInt = const {
    GraphMutationTag.nodeAdded: 0,
    GraphMutationTag.nodeRemoved: 1,
    GraphMutationTag.edgeAdded: 2,
    GraphMutationTag.edgeRemoved: 3,
    GraphMutationTag.valueChanged: 4,
  };

  static final _intToTag = const {
    0: GraphMutationTag.nodeAdded,
    1: GraphMutationTag.nodeRemoved,
    2: GraphMutationTag.edgeAdded,
    3: GraphMutationTag.edgeRemoved,
    4: GraphMutationTag.valueChanged,
  };

  var _data;
  GraphMutationTag _tag = GraphMutationTag.unknown;

  GraphMutationTag get tag => _tag;
  NodeMutation get nodeAdded {
    if (_tag != GraphMutationTag.nodeAdded) {
      throw new bindings.UnsetUnionTagError(_tag, GraphMutationTag.nodeAdded);
    }
    return _data;
  }

  set nodeAdded(NodeMutation value) {
    _tag = GraphMutationTag.nodeAdded;
    _data = value;
  }
  NodeMutation get nodeRemoved {
    if (_tag != GraphMutationTag.nodeRemoved) {
      throw new bindings.UnsetUnionTagError(_tag, GraphMutationTag.nodeRemoved);
    }
    return _data;
  }

  set nodeRemoved(NodeMutation value) {
    _tag = GraphMutationTag.nodeRemoved;
    _data = value;
  }
  EdgeMutation get edgeAdded {
    if (_tag != GraphMutationTag.edgeAdded) {
      throw new bindings.UnsetUnionTagError(_tag, GraphMutationTag.edgeAdded);
    }
    return _data;
  }

  set edgeAdded(EdgeMutation value) {
    _tag = GraphMutationTag.edgeAdded;
    _data = value;
  }
  EdgeMutation get edgeRemoved {
    if (_tag != GraphMutationTag.edgeRemoved) {
      throw new bindings.UnsetUnionTagError(_tag, GraphMutationTag.edgeRemoved);
    }
    return _data;
  }

  set edgeRemoved(EdgeMutation value) {
    _tag = GraphMutationTag.edgeRemoved;
    _data = value;
  }
  NodeValueMutation get valueChanged {
    if (_tag != GraphMutationTag.valueChanged) {
      throw new bindings.UnsetUnionTagError(_tag, GraphMutationTag.valueChanged);
    }
    return _data;
  }

  set valueChanged(NodeValueMutation value) {
    _tag = GraphMutationTag.valueChanged;
    _data = value;
  }

  static GraphMutation decode(bindings.Decoder decoder0, int offset) {
    int size = decoder0.decodeUint32(offset);
    if (size == 0) {
      return null;
    }
    GraphMutation result = new GraphMutation();

    
    GraphMutationTag tag = _intToTag[decoder0.decodeUint32(offset + 4)];
    switch (tag) {
      case GraphMutationTag.nodeAdded:
        
        var decoder1 = decoder0.decodePointer(offset + 8, false);
        result.nodeAdded = NodeMutation.decode(decoder1);
        break;
      case GraphMutationTag.nodeRemoved:
        
        var decoder1 = decoder0.decodePointer(offset + 8, false);
        result.nodeRemoved = NodeMutation.decode(decoder1);
        break;
      case GraphMutationTag.edgeAdded:
        
        var decoder1 = decoder0.decodePointer(offset + 8, false);
        result.edgeAdded = EdgeMutation.decode(decoder1);
        break;
      case GraphMutationTag.edgeRemoved:
        
        var decoder1 = decoder0.decodePointer(offset + 8, false);
        result.edgeRemoved = EdgeMutation.decode(decoder1);
        break;
      case GraphMutationTag.valueChanged:
        
        var decoder1 = decoder0.decodePointer(offset + 8, false);
        result.valueChanged = NodeValueMutation.decode(decoder1);
        break;
      default:
        throw new bindings.MojoCodecError("Bad union tag: $tag");
    }

    return result;
  }

  void encode(bindings.Encoder encoder0, int offset) {
    
    encoder0.encodeUint32(16, offset);
    encoder0.encodeUint32(_tagToInt[_tag], offset + 4);
    switch (_tag) {
      case GraphMutationTag.nodeAdded:
        encoder0.encodeStruct(nodeAdded, offset + 8, false);
        break;
      case GraphMutationTag.nodeRemoved:
        encoder0.encodeStruct(nodeRemoved, offset + 8, false);
        break;
      case GraphMutationTag.edgeAdded:
        encoder0.encodeStruct(edgeAdded, offset + 8, false);
        break;
      case GraphMutationTag.edgeRemoved:
        encoder0.encodeStruct(edgeRemoved, offset + 8, false);
        break;
      case GraphMutationTag.valueChanged:
        encoder0.encodeStruct(valueChanged, offset + 8, false);
        break;
      default:
        throw new bindings.MojoCodecError("Bad union tag: $_tag");
    }
  }

  String toString() {
    String result = "GraphMutation(";
    switch (_tag) {
      case GraphMutationTag.nodeAdded:
        result += "nodeAdded";
        break;
      case GraphMutationTag.nodeRemoved:
        result += "nodeRemoved";
        break;
      case GraphMutationTag.edgeAdded:
        result += "edgeAdded";
        break;
      case GraphMutationTag.edgeRemoved:
        result += "edgeRemoved";
        break;
      case GraphMutationTag.valueChanged:
        result += "valueChanged";
        break;
      default:
        result += "unknown";
    }
    result += ": $_data)";
    return result;
  }
}
const int _graphMethodAddObserverName = 0;
const int _graphMethodApplyMutationsName = 1;
  
class GraphStatus extends bindings.MojoEnum {
  static const GraphStatus success = const GraphStatus._(0);
  static const GraphStatus notAllowed = const GraphStatus._(1);
  static const GraphStatus failure = const GraphStatus._(2);

  const GraphStatus._(int v) : super(v);

  static const Map<String, GraphStatus> valuesMap = const {
    "success": success,
    "notAllowed": notAllowed,
    "failure": failure,
  };
  static const List<GraphStatus> values = const [
    success,
    notAllowed,
    failure,
  ];

  static GraphStatus valueOf(String name) => valuesMap[name];

  factory GraphStatus(int v) {
    switch (v) {
      case 0:
        return GraphStatus.success;
      case 1:
        return GraphStatus.notAllowed;
      case 2:
        return GraphStatus.failure;
      default:
        return null;
    }
  }

  static GraphStatus decode(bindings.Decoder decoder0, int offset) {
    int v = decoder0.decodeUint32(offset);
    GraphStatus result = new GraphStatus(v);
    if (result == null) {
      throw new bindings.MojoCodecError(
          'Bad value $v for enum GraphStatus.');
    }
    return result;
  }

  String toString() {
    switch(this) {
      case success:
        return 'GraphStatus.success';
      case notAllowed:
        return 'GraphStatus.notAllowed';
      case failure:
        return 'GraphStatus.failure';
      default:
        return null;
    }
  }

  int toJson() => mojoEnumValue;
}

class _GraphServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class Graph {
  static const String serviceName = "modular::Graph";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _GraphServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static GraphProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    GraphProxy p = new GraphProxy.unbound();
    String name = serviceName ?? Graph.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void addObserver(GraphObserverInterface observer);
  void applyMutations(List<GraphMutation> mutations,void callback(GraphStatus status, String errorDescription));
}

abstract class GraphInterface
    implements bindings.MojoInterface<Graph>,
               Graph {
  factory GraphInterface([Graph impl]) =>
      new GraphStub.unbound(impl);

  factory GraphInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [Graph impl]) =>
      new GraphStub.fromEndpoint(endpoint, impl);

  factory GraphInterface.fromMock(
      Graph mock) =>
      new GraphProxy.fromMock(mock);
}

abstract class GraphInterfaceRequest
    implements bindings.MojoInterface<Graph>,
               Graph {
  factory GraphInterfaceRequest() =>
      new GraphProxy.unbound();
}

class _GraphProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<Graph> {
  Graph impl;

  _GraphProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _GraphProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _GraphProxyControl.unbound() : super.unbound();

  String get serviceName => Graph.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _graphMethodApplyMutationsName:
        var r = GraphApplyMutationsResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.status , r.errorDescription );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_GraphProxyControl($superString)";
  }
}

class GraphProxy
    extends bindings.Proxy<Graph>
    implements Graph,
               GraphInterface,
               GraphInterfaceRequest {
  GraphProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _GraphProxyControl.fromEndpoint(endpoint));

  GraphProxy.fromHandle(core.MojoHandle handle)
      : super(new _GraphProxyControl.fromHandle(handle));

  GraphProxy.unbound()
      : super(new _GraphProxyControl.unbound());

  factory GraphProxy.fromMock(Graph mock) {
    GraphProxy newMockedProxy =
        new GraphProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static GraphProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For GraphProxy"));
    return new GraphProxy.fromEndpoint(endpoint);
  }


  void addObserver(GraphObserverInterface observer) {
    if (impl != null) {
      impl.addObserver(observer);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _GraphAddObserverParams();
    params.observer = observer;
    ctrl.sendMessage(params,
        _graphMethodAddObserverName);
  }
  void applyMutations(List<GraphMutation> mutations,void callback(GraphStatus status, String errorDescription)) {
    if (impl != null) {
      impl.applyMutations(mutations,callback);
      return;
    }
    var params = new _GraphApplyMutationsParams();
    params.mutations = mutations;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((GraphStatus status, String errorDescription) {
        z.bindCallback(() {
          callback(status, errorDescription);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _graphMethodApplyMutationsName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _GraphStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<Graph> {
  Graph _impl;

  _GraphStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Graph impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _GraphStubControl.fromHandle(
      core.MojoHandle handle, [Graph impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _GraphStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => Graph.serviceName;


  Function _graphApplyMutationsResponseParamsResponder(
      int requestId) {
  return (GraphStatus status, String errorDescription) {
      var result = new GraphApplyMutationsResponseParams();
      result.status = status;
      result.errorDescription = errorDescription;
      sendResponse(buildResponseWithId(
          result,
          _graphMethodApplyMutationsName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _graphMethodAddObserverName:
        var params = _GraphAddObserverParams.deserialize(
            message.payload);
        _impl.addObserver(params.observer);
        break;
      case _graphMethodApplyMutationsName:
        var params = _GraphApplyMutationsParams.deserialize(
            message.payload);
        _impl.applyMutations(params.mutations, _graphApplyMutationsResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  Graph get impl => _impl;
  set impl(Graph d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_GraphStubControl($superString)";
  }

  int get version => 0;
}

class GraphStub
    extends bindings.Stub<Graph>
    implements Graph,
               GraphInterface,
               GraphInterfaceRequest {
  GraphStub.unbound([Graph impl])
      : super(new _GraphStubControl.unbound(impl));

  GraphStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Graph impl])
      : super(new _GraphStubControl.fromEndpoint(endpoint, impl));

  GraphStub.fromHandle(
      core.MojoHandle handle, [Graph impl])
      : super(new _GraphStubControl.fromHandle(handle, impl));

  static GraphStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For GraphStub"));
    return new GraphStub.fromEndpoint(endpoint);
  }


  void addObserver(GraphObserverInterface observer) {
    return impl.addObserver(observer);
  }
  void applyMutations(List<GraphMutation> mutations,void callback(GraphStatus status, String errorDescription)) {
    return impl.applyMutations(mutations,callback);
  }
}

const int _graphObserverMethodOnChangeName = 0;

class _GraphObserverServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class GraphObserver {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _GraphObserverServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static GraphObserverProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    GraphObserverProxy p = new GraphObserverProxy.unbound();
    String name = serviceName ?? GraphObserver.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void onChange(List<GraphMutation> mutations,void callback());
}

abstract class GraphObserverInterface
    implements bindings.MojoInterface<GraphObserver>,
               GraphObserver {
  factory GraphObserverInterface([GraphObserver impl]) =>
      new GraphObserverStub.unbound(impl);

  factory GraphObserverInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [GraphObserver impl]) =>
      new GraphObserverStub.fromEndpoint(endpoint, impl);

  factory GraphObserverInterface.fromMock(
      GraphObserver mock) =>
      new GraphObserverProxy.fromMock(mock);
}

abstract class GraphObserverInterfaceRequest
    implements bindings.MojoInterface<GraphObserver>,
               GraphObserver {
  factory GraphObserverInterfaceRequest() =>
      new GraphObserverProxy.unbound();
}

class _GraphObserverProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<GraphObserver> {
  GraphObserver impl;

  _GraphObserverProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _GraphObserverProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _GraphObserverProxyControl.unbound() : super.unbound();

  String get serviceName => GraphObserver.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _graphObserverMethodOnChangeName:
        var r = GraphObserverOnChangeResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_GraphObserverProxyControl($superString)";
  }
}

class GraphObserverProxy
    extends bindings.Proxy<GraphObserver>
    implements GraphObserver,
               GraphObserverInterface,
               GraphObserverInterfaceRequest {
  GraphObserverProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _GraphObserverProxyControl.fromEndpoint(endpoint));

  GraphObserverProxy.fromHandle(core.MojoHandle handle)
      : super(new _GraphObserverProxyControl.fromHandle(handle));

  GraphObserverProxy.unbound()
      : super(new _GraphObserverProxyControl.unbound());

  factory GraphObserverProxy.fromMock(GraphObserver mock) {
    GraphObserverProxy newMockedProxy =
        new GraphObserverProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static GraphObserverProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For GraphObserverProxy"));
    return new GraphObserverProxy.fromEndpoint(endpoint);
  }


  void onChange(List<GraphMutation> mutations,void callback()) {
    if (impl != null) {
      impl.onChange(mutations,callback);
      return;
    }
    var params = new _GraphObserverOnChangeParams();
    params.mutations = mutations;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _graphObserverMethodOnChangeName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _GraphObserverStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<GraphObserver> {
  GraphObserver _impl;

  _GraphObserverStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [GraphObserver impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _GraphObserverStubControl.fromHandle(
      core.MojoHandle handle, [GraphObserver impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _GraphObserverStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => GraphObserver.serviceName;


  Function _graphObserverOnChangeResponseParamsResponder(
      int requestId) {
  return () {
      var result = new GraphObserverOnChangeResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _graphObserverMethodOnChangeName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _graphObserverMethodOnChangeName:
        var params = _GraphObserverOnChangeParams.deserialize(
            message.payload);
        _impl.onChange(params.mutations, _graphObserverOnChangeResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  GraphObserver get impl => _impl;
  set impl(GraphObserver d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_GraphObserverStubControl($superString)";
  }

  int get version => 0;
}

class GraphObserverStub
    extends bindings.Stub<GraphObserver>
    implements GraphObserver,
               GraphObserverInterface,
               GraphObserverInterfaceRequest {
  GraphObserverStub.unbound([GraphObserver impl])
      : super(new _GraphObserverStubControl.unbound(impl));

  GraphObserverStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [GraphObserver impl])
      : super(new _GraphObserverStubControl.fromEndpoint(endpoint, impl));

  GraphObserverStub.fromHandle(
      core.MojoHandle handle, [GraphObserver impl])
      : super(new _GraphObserverStubControl.fromHandle(handle, impl));

  static GraphObserverStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For GraphObserverStub"));
    return new GraphObserverStub.fromEndpoint(endpoint);
  }


  void onChange(List<GraphMutation> mutations,void callback()) {
    return impl.onChange(mutations,callback);
  }
}



