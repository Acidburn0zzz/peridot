// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[DartPackage="modular_services"]
module ledger2;

import "public/interfaces/graph.mojom";

// This Graph-like interface should be merged ASAP with the one in graph.mojom.
// It is separate for now to allow for experimentation without forcing the
// rest of the system to undergo unnecessary churn.
//
// One difference is to use the same LedgerObserver interface to guarantee
// correct sequencing of:
//   - events received from other devices via Syncbase/Firebase.
//   - success/failure results from ApplyEvent().
// ... which can't be guaranteed if they are arriving via different pipes.
interface LedgerMutator {
  ApplyEvent(modular.GraphEvent event);
};

// Ditto.
interface LedgerObserver {
  OnSuccess(modular.GraphEvent event);
  OnFailure(modular.GraphEvent event, modular.GraphMutation failed);
  OnChange(modular.GraphEvent event);
};

[ServiceName="ledger2::Ledger"]
interface Ledger {
  // Create and connect to a new session.  The UUID should not correspond to an
  // existing session.
  CreateSession(array<uint8, 16> uuid,
      LedgerMutator& mutator, LedgerObserver observer) => (Status status);

  // Connect to the specified session, which should already exist.
  ConnectToSession(array<uint8, 16> uuid,
      LedgerMutator& mutator, LedgerObserver observer) => (Status status);

  enum Status {
    // The call completed successfully.
    OK = 0,
    // The call failed after an internal error.
    INTERNAL_ERROR,
    // User authentication failed.
    AUTHENTICATION_ERROR,
    // Cannot create a session that already exists.
    SESSION_ALREADY_EXISTS,
    // Cannot connect to a session that doesn't already exist.
    SESSION_DOES_NOT_EXIST,
  };
};
