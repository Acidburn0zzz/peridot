// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library synced_store_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class AuthData extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  String uid = null;
  String displayName = null;
  String avatar = null;

  AuthData() : super(kVersions.last.size);

  AuthData.init(
    String this.uid, 
    String this.displayName, 
    String this.avatar
  ) : super(kVersions.last.size);

  static AuthData deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static AuthData decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    AuthData result = new AuthData();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      result.uid = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.displayName = decoder0.decodeString(16, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.avatar = decoder0.decodeString(24, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeString(uid, 8, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "uid of struct AuthData: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(displayName, 16, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "displayName of struct AuthData: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(avatar, 24, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "avatar of struct AuthData: $e";
      rethrow;
    }
  }

  String toString() {
    return "AuthData("
           "uid: $uid" ", "
           "displayName: $displayName" ", "
           "avatar: $avatar" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["uid"] = uid;
    map["displayName"] = displayName;
    map["avatar"] = avatar;
    return map;
  }
}


class _SyncedStoreAuthenticateParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  String username = null;

  _SyncedStoreAuthenticateParams() : super(kVersions.last.size);

  _SyncedStoreAuthenticateParams.init(
    String this.username
  ) : super(kVersions.last.size);

  static _SyncedStoreAuthenticateParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _SyncedStoreAuthenticateParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _SyncedStoreAuthenticateParams result = new _SyncedStoreAuthenticateParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      result.username = decoder0.decodeString(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeString(username, 8, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "username of struct _SyncedStoreAuthenticateParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_SyncedStoreAuthenticateParams("
           "username: $username" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["username"] = username;
    return map;
  }
}


class SyncedStoreAuthenticateResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  AuthData authData = null;
  SyncedStoreStatus status = null;

  SyncedStoreAuthenticateResponseParams() : super(kVersions.last.size);

  SyncedStoreAuthenticateResponseParams.init(
    AuthData this.authData, 
    SyncedStoreStatus this.status
  ) : super(kVersions.last.size);

  static SyncedStoreAuthenticateResponseParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static SyncedStoreAuthenticateResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    SyncedStoreAuthenticateResponseParams result = new SyncedStoreAuthenticateResponseParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      result.authData = AuthData.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
        result.status = SyncedStoreStatus.decode(decoder0, 16);
        if (result.status == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable SyncedStoreStatus.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeStruct(authData, 8, true);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "authData of struct SyncedStoreAuthenticateResponseParams: $e";
      rethrow;
    }
    try {
      encoder0.encodeEnum(status, 16);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "status of struct SyncedStoreAuthenticateResponseParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "SyncedStoreAuthenticateResponseParams("
           "authData: $authData" ", "
           "status: $status" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["authData"] = authData;
    map["status"] = status;
    return map;
  }
}


class _SyncedStorePutParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  Map<String, String> keyValues = null;

  _SyncedStorePutParams() : super(kVersions.last.size);

  _SyncedStorePutParams.init(
    Map<String, String> this.keyValues
  ) : super(kVersions.last.size);

  static _SyncedStorePutParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _SyncedStorePutParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _SyncedStorePutParams result = new _SyncedStorePutParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        decoder1.decodeDataHeaderForMap();
        List<String> keys0;
        List<String> values0;
        {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize, false);
          {
            var si2 = decoder2.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
            keys0 = new List<String>(si2.numElements);
            for (int i2 = 0; i2 < si2.numElements; ++i2) {
              
              keys0[i2] = decoder2.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i2, false);
            }
          }
        }
        {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize, false);
          {
            var si2 = decoder2.decodeDataHeaderForPointerArray(keys0.length);
            values0 = new List<String>(si2.numElements);
            for (int i2 = 0; i2 < si2.numElements; ++i2) {
              
              values0[i2] = decoder2.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i2, false);
            }
          }
        }
        result.keyValues = new Map<String, String>.fromIterables(
            keys0, values0);
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      if (keyValues == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encoderForMap(8);
        var keys0 = keyValues.keys.toList();
        var values0 = keyValues.values.toList();
        
        {
          var encoder2 = encoder1.encodePointerArray(keys0.length, bindings.ArrayDataHeader.kHeaderSize, bindings.kUnspecifiedArrayLength);
          for (int i1 = 0; i1 < keys0.length; ++i1) {
            encoder2.encodeString(keys0[i1], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          }
        }
        
        {
          var encoder2 = encoder1.encodePointerArray(values0.length, bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize, bindings.kUnspecifiedArrayLength);
          for (int i1 = 0; i1 < values0.length; ++i1) {
            encoder2.encodeString(values0[i1], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          }
        }
      }
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "keyValues of struct _SyncedStorePutParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_SyncedStorePutParams("
           "keyValues: $keyValues" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["keyValues"] = keyValues;
    return map;
  }
}


class SyncedStorePutResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  SyncedStoreStatus status = null;

  SyncedStorePutResponseParams() : super(kVersions.last.size);

  SyncedStorePutResponseParams.init(
    SyncedStoreStatus this.status
  ) : super(kVersions.last.size);

  static SyncedStorePutResponseParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static SyncedStorePutResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    SyncedStorePutResponseParams result = new SyncedStorePutResponseParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
        result.status = SyncedStoreStatus.decode(decoder0, 8);
        if (result.status == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable SyncedStoreStatus.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeEnum(status, 8);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "status of struct SyncedStorePutResponseParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "SyncedStorePutResponseParams("
           "status: $status" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["status"] = status;
    return map;
  }
}


class _SyncedStoreGetParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  List<String> keys = null;

  _SyncedStoreGetParams() : super(kVersions.last.size);

  _SyncedStoreGetParams.init(
    List<String> this.keys
  ) : super(kVersions.last.size);

  static _SyncedStoreGetParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _SyncedStoreGetParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _SyncedStoreGetParams result = new _SyncedStoreGetParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.keys = new List<String>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          result.keys[i1] = decoder1.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      if (keys == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encodePointerArray(keys.length, 8, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < keys.length; ++i0) {
          encoder1.encodeString(keys[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "keys of struct _SyncedStoreGetParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_SyncedStoreGetParams("
           "keys: $keys" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["keys"] = keys;
    return map;
  }
}


class SyncedStoreGetResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  Map<String, String> keyValues = null;
  SyncedStoreStatus status = null;

  SyncedStoreGetResponseParams() : super(kVersions.last.size);

  SyncedStoreGetResponseParams.init(
    Map<String, String> this.keyValues, 
    SyncedStoreStatus this.status
  ) : super(kVersions.last.size);

  static SyncedStoreGetResponseParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static SyncedStoreGetResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    SyncedStoreGetResponseParams result = new SyncedStoreGetResponseParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      if (decoder1 == null) {
        result.keyValues = null;
      } else {
        decoder1.decodeDataHeaderForMap();
        List<String> keys0;
        List<String> values0;
        {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize, false);
          {
            var si2 = decoder2.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
            keys0 = new List<String>(si2.numElements);
            for (int i2 = 0; i2 < si2.numElements; ++i2) {
              
              keys0[i2] = decoder2.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i2, false);
            }
          }
        }
        {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize, false);
          {
            var si2 = decoder2.decodeDataHeaderForPointerArray(keys0.length);
            values0 = new List<String>(si2.numElements);
            for (int i2 = 0; i2 < si2.numElements; ++i2) {
              
              values0[i2] = decoder2.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i2, false);
            }
          }
        }
        result.keyValues = new Map<String, String>.fromIterables(
            keys0, values0);
      }
    }
    if (mainDataHeader.version >= 0) {
      
        result.status = SyncedStoreStatus.decode(decoder0, 16);
        if (result.status == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable SyncedStoreStatus.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      if (keyValues == null) {
        encoder0.encodeNullPointer(8, true);
      } else {
        var encoder1 = encoder0.encoderForMap(8);
        var keys0 = keyValues.keys.toList();
        var values0 = keyValues.values.toList();
        
        {
          var encoder2 = encoder1.encodePointerArray(keys0.length, bindings.ArrayDataHeader.kHeaderSize, bindings.kUnspecifiedArrayLength);
          for (int i1 = 0; i1 < keys0.length; ++i1) {
            encoder2.encodeString(keys0[i1], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          }
        }
        
        {
          var encoder2 = encoder1.encodePointerArray(values0.length, bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize, bindings.kUnspecifiedArrayLength);
          for (int i1 = 0; i1 < values0.length; ++i1) {
            encoder2.encodeString(values0[i1], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          }
        }
      }
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "keyValues of struct SyncedStoreGetResponseParams: $e";
      rethrow;
    }
    try {
      encoder0.encodeEnum(status, 16);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "status of struct SyncedStoreGetResponseParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "SyncedStoreGetResponseParams("
           "keyValues: $keyValues" ", "
           "status: $status" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["keyValues"] = keyValues;
    map["status"] = status;
    return map;
  }
}


class _SyncedStoreGetByPrefixParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  List<String> keyPrefixes = null;

  _SyncedStoreGetByPrefixParams() : super(kVersions.last.size);

  _SyncedStoreGetByPrefixParams.init(
    List<String> this.keyPrefixes
  ) : super(kVersions.last.size);

  static _SyncedStoreGetByPrefixParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _SyncedStoreGetByPrefixParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _SyncedStoreGetByPrefixParams result = new _SyncedStoreGetByPrefixParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.keyPrefixes = new List<String>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          result.keyPrefixes[i1] = decoder1.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      if (keyPrefixes == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encodePointerArray(keyPrefixes.length, 8, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < keyPrefixes.length; ++i0) {
          encoder1.encodeString(keyPrefixes[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "keyPrefixes of struct _SyncedStoreGetByPrefixParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_SyncedStoreGetByPrefixParams("
           "keyPrefixes: $keyPrefixes" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["keyPrefixes"] = keyPrefixes;
    return map;
  }
}


class SyncedStoreGetByPrefixResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  Map<String, String> keyValues = null;
  SyncedStoreStatus status = null;

  SyncedStoreGetByPrefixResponseParams() : super(kVersions.last.size);

  SyncedStoreGetByPrefixResponseParams.init(
    Map<String, String> this.keyValues, 
    SyncedStoreStatus this.status
  ) : super(kVersions.last.size);

  static SyncedStoreGetByPrefixResponseParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static SyncedStoreGetByPrefixResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    SyncedStoreGetByPrefixResponseParams result = new SyncedStoreGetByPrefixResponseParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      if (decoder1 == null) {
        result.keyValues = null;
      } else {
        decoder1.decodeDataHeaderForMap();
        List<String> keys0;
        List<String> values0;
        {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize, false);
          {
            var si2 = decoder2.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
            keys0 = new List<String>(si2.numElements);
            for (int i2 = 0; i2 < si2.numElements; ++i2) {
              
              keys0[i2] = decoder2.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i2, false);
            }
          }
        }
        {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize, false);
          {
            var si2 = decoder2.decodeDataHeaderForPointerArray(keys0.length);
            values0 = new List<String>(si2.numElements);
            for (int i2 = 0; i2 < si2.numElements; ++i2) {
              
              values0[i2] = decoder2.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i2, false);
            }
          }
        }
        result.keyValues = new Map<String, String>.fromIterables(
            keys0, values0);
      }
    }
    if (mainDataHeader.version >= 0) {
      
        result.status = SyncedStoreStatus.decode(decoder0, 16);
        if (result.status == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable SyncedStoreStatus.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      if (keyValues == null) {
        encoder0.encodeNullPointer(8, true);
      } else {
        var encoder1 = encoder0.encoderForMap(8);
        var keys0 = keyValues.keys.toList();
        var values0 = keyValues.values.toList();
        
        {
          var encoder2 = encoder1.encodePointerArray(keys0.length, bindings.ArrayDataHeader.kHeaderSize, bindings.kUnspecifiedArrayLength);
          for (int i1 = 0; i1 < keys0.length; ++i1) {
            encoder2.encodeString(keys0[i1], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          }
        }
        
        {
          var encoder2 = encoder1.encodePointerArray(values0.length, bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize, bindings.kUnspecifiedArrayLength);
          for (int i1 = 0; i1 < values0.length; ++i1) {
            encoder2.encodeString(values0[i1], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          }
        }
      }
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "keyValues of struct SyncedStoreGetByPrefixResponseParams: $e";
      rethrow;
    }
    try {
      encoder0.encodeEnum(status, 16);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "status of struct SyncedStoreGetByPrefixResponseParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "SyncedStoreGetByPrefixResponseParams("
           "keyValues: $keyValues" ", "
           "status: $status" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["keyValues"] = keyValues;
    map["status"] = status;
    return map;
  }
}


class _SyncedStoreGetByValueAttributesParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String keyPrefix = null;
  String expectedFieldValues = null;

  _SyncedStoreGetByValueAttributesParams() : super(kVersions.last.size);

  _SyncedStoreGetByValueAttributesParams.init(
    String this.keyPrefix, 
    String this.expectedFieldValues
  ) : super(kVersions.last.size);

  static _SyncedStoreGetByValueAttributesParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _SyncedStoreGetByValueAttributesParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _SyncedStoreGetByValueAttributesParams result = new _SyncedStoreGetByValueAttributesParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      result.keyPrefix = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.expectedFieldValues = decoder0.decodeString(16, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeString(keyPrefix, 8, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "keyPrefix of struct _SyncedStoreGetByValueAttributesParams: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(expectedFieldValues, 16, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "expectedFieldValues of struct _SyncedStoreGetByValueAttributesParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_SyncedStoreGetByValueAttributesParams("
           "keyPrefix: $keyPrefix" ", "
           "expectedFieldValues: $expectedFieldValues" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["keyPrefix"] = keyPrefix;
    map["expectedFieldValues"] = expectedFieldValues;
    return map;
  }
}


class SyncedStoreGetByValueAttributesResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  Map<String, String> keyValues = null;
  SyncedStoreStatus status = null;

  SyncedStoreGetByValueAttributesResponseParams() : super(kVersions.last.size);

  SyncedStoreGetByValueAttributesResponseParams.init(
    Map<String, String> this.keyValues, 
    SyncedStoreStatus this.status
  ) : super(kVersions.last.size);

  static SyncedStoreGetByValueAttributesResponseParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static SyncedStoreGetByValueAttributesResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    SyncedStoreGetByValueAttributesResponseParams result = new SyncedStoreGetByValueAttributesResponseParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      if (decoder1 == null) {
        result.keyValues = null;
      } else {
        decoder1.decodeDataHeaderForMap();
        List<String> keys0;
        List<String> values0;
        {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize, false);
          {
            var si2 = decoder2.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
            keys0 = new List<String>(si2.numElements);
            for (int i2 = 0; i2 < si2.numElements; ++i2) {
              
              keys0[i2] = decoder2.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i2, false);
            }
          }
        }
        {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize, false);
          {
            var si2 = decoder2.decodeDataHeaderForPointerArray(keys0.length);
            values0 = new List<String>(si2.numElements);
            for (int i2 = 0; i2 < si2.numElements; ++i2) {
              
              values0[i2] = decoder2.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i2, false);
            }
          }
        }
        result.keyValues = new Map<String, String>.fromIterables(
            keys0, values0);
      }
    }
    if (mainDataHeader.version >= 0) {
      
        result.status = SyncedStoreStatus.decode(decoder0, 16);
        if (result.status == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable SyncedStoreStatus.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      if (keyValues == null) {
        encoder0.encodeNullPointer(8, true);
      } else {
        var encoder1 = encoder0.encoderForMap(8);
        var keys0 = keyValues.keys.toList();
        var values0 = keyValues.values.toList();
        
        {
          var encoder2 = encoder1.encodePointerArray(keys0.length, bindings.ArrayDataHeader.kHeaderSize, bindings.kUnspecifiedArrayLength);
          for (int i1 = 0; i1 < keys0.length; ++i1) {
            encoder2.encodeString(keys0[i1], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          }
        }
        
        {
          var encoder2 = encoder1.encodePointerArray(values0.length, bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize, bindings.kUnspecifiedArrayLength);
          for (int i1 = 0; i1 < values0.length; ++i1) {
            encoder2.encodeString(values0[i1], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          }
        }
      }
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "keyValues of struct SyncedStoreGetByValueAttributesResponseParams: $e";
      rethrow;
    }
    try {
      encoder0.encodeEnum(status, 16);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "status of struct SyncedStoreGetByValueAttributesResponseParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "SyncedStoreGetByValueAttributesResponseParams("
           "keyValues: $keyValues" ", "
           "status: $status" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["keyValues"] = keyValues;
    map["status"] = status;
    return map;
  }
}


class _SyncedStoreAddObserverParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  String keyPrefix = null;
  String expectedFieldValues = null;
  SyncedStoreObserverInterface observer = null;

  _SyncedStoreAddObserverParams() : super(kVersions.last.size);

  _SyncedStoreAddObserverParams.init(
    String this.keyPrefix, 
    String this.expectedFieldValues, 
    SyncedStoreObserverInterface this.observer
  ) : super(kVersions.last.size);

  static _SyncedStoreAddObserverParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _SyncedStoreAddObserverParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _SyncedStoreAddObserverParams result = new _SyncedStoreAddObserverParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      result.keyPrefix = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.expectedFieldValues = decoder0.decodeString(16, true);
    }
    if (mainDataHeader.version >= 0) {
      
      result.observer = decoder0.decodeServiceInterface(24, false, SyncedStoreObserverProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeString(keyPrefix, 8, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "keyPrefix of struct _SyncedStoreAddObserverParams: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(expectedFieldValues, 16, true);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "expectedFieldValues of struct _SyncedStoreAddObserverParams: $e";
      rethrow;
    }
    try {
      encoder0.encodeInterface(observer, 24, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "observer of struct _SyncedStoreAddObserverParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_SyncedStoreAddObserverParams("
           "keyPrefix: $keyPrefix" ", "
           "expectedFieldValues: $expectedFieldValues" ", "
           "observer: $observer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class SyncedStoreAddObserverResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  SyncedStoreStatus status = null;

  SyncedStoreAddObserverResponseParams() : super(kVersions.last.size);

  SyncedStoreAddObserverResponseParams.init(
    SyncedStoreStatus this.status
  ) : super(kVersions.last.size);

  static SyncedStoreAddObserverResponseParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static SyncedStoreAddObserverResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    SyncedStoreAddObserverResponseParams result = new SyncedStoreAddObserverResponseParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
        result.status = SyncedStoreStatus.decode(decoder0, 8);
        if (result.status == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable SyncedStoreStatus.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeEnum(status, 8);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "status of struct SyncedStoreAddObserverResponseParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "SyncedStoreAddObserverResponseParams("
           "status: $status" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["status"] = status;
    return map;
  }
}


class _SyncedStoreObserverOnChangeParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  Map<String, String> changes = null;

  _SyncedStoreObserverOnChangeParams() : super(kVersions.last.size);

  _SyncedStoreObserverOnChangeParams.init(
    Map<String, String> this.changes
  ) : super(kVersions.last.size);

  static _SyncedStoreObserverOnChangeParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _SyncedStoreObserverOnChangeParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _SyncedStoreObserverOnChangeParams result = new _SyncedStoreObserverOnChangeParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      if (decoder1 == null) {
        result.changes = null;
      } else {
        decoder1.decodeDataHeaderForMap();
        List<String> keys0;
        List<String> values0;
        {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize, false);
          {
            var si2 = decoder2.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
            keys0 = new List<String>(si2.numElements);
            for (int i2 = 0; i2 < si2.numElements; ++i2) {
              
              keys0[i2] = decoder2.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i2, false);
            }
          }
        }
        {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize, false);
          {
            var si2 = decoder2.decodeDataHeaderForPointerArray(keys0.length);
            values0 = new List<String>(si2.numElements);
            for (int i2 = 0; i2 < si2.numElements; ++i2) {
              
              values0[i2] = decoder2.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i2, true);
            }
          }
        }
        result.changes = new Map<String, String>.fromIterables(
            keys0, values0);
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      if (changes == null) {
        encoder0.encodeNullPointer(8, true);
      } else {
        var encoder1 = encoder0.encoderForMap(8);
        var keys0 = changes.keys.toList();
        var values0 = changes.values.toList();
        
        {
          var encoder2 = encoder1.encodePointerArray(keys0.length, bindings.ArrayDataHeader.kHeaderSize, bindings.kUnspecifiedArrayLength);
          for (int i1 = 0; i1 < keys0.length; ++i1) {
            encoder2.encodeString(keys0[i1], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          }
        }
        
        {
          var encoder2 = encoder1.encodePointerArray(values0.length, bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize, bindings.kUnspecifiedArrayLength);
          for (int i1 = 0; i1 < values0.length; ++i1) {
            encoder2.encodeString(values0[i1], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, true);
          }
        }
      }
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "changes of struct _SyncedStoreObserverOnChangeParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_SyncedStoreObserverOnChangeParams("
           "changes: $changes" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["changes"] = changes;
    return map;
  }
}


class SyncedStoreObserverOnChangeResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  SyncedStoreObserverOnChangeResponseParams() : super(kVersions.last.size);

  SyncedStoreObserverOnChangeResponseParams.init(
  ) : super(kVersions.last.size);

  static SyncedStoreObserverOnChangeResponseParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static SyncedStoreObserverOnChangeResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    SyncedStoreObserverOnChangeResponseParams result = new SyncedStoreObserverOnChangeResponseParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
  }

  String toString() {
    return "SyncedStoreObserverOnChangeResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}

const int _syncedStoreMethodAuthenticateName = 0;
const int _syncedStoreMethodPutName = 1;
const int _syncedStoreMethodGetName = 2;
const int _syncedStoreMethodGetByPrefixName = 3;
const int _syncedStoreMethodGetByValueAttributesName = 4;
const int _syncedStoreMethodAddObserverName = 5;
  
class SyncedStoreStatus extends bindings.MojoEnum {
  static const SyncedStoreStatus ok = const SyncedStoreStatus._(0);
  static const SyncedStoreStatus internalError = const SyncedStoreStatus._(1);
  static const SyncedStoreStatus authenticationError = const SyncedStoreStatus._(2);

  const SyncedStoreStatus._(int v) : super(v);

  static const Map<String, SyncedStoreStatus> valuesMap = const {
    "ok": ok,
    "internalError": internalError,
    "authenticationError": authenticationError,
  };
  static const List<SyncedStoreStatus> values = const [
    ok,
    internalError,
    authenticationError,
  ];

  static SyncedStoreStatus valueOf(String name) => valuesMap[name];

  factory SyncedStoreStatus(int v) {
    switch (v) {
      case 0:
        return SyncedStoreStatus.ok;
      case 1:
        return SyncedStoreStatus.internalError;
      case 2:
        return SyncedStoreStatus.authenticationError;
      default:
        return null;
    }
  }

  static SyncedStoreStatus decode(bindings.Decoder decoder0, int offset) {
    int v = decoder0.decodeUint32(offset);
    SyncedStoreStatus result = new SyncedStoreStatus(v);
    if (result == null) {
      throw new bindings.MojoCodecError(
          'Bad value $v for enum SyncedStoreStatus.');
    }
    return result;
  }

  String toString() {
    switch(this) {
      case ok:
        return 'SyncedStoreStatus.ok';
      case internalError:
        return 'SyncedStoreStatus.internalError';
      case authenticationError:
        return 'SyncedStoreStatus.authenticationError';
      default:
        return null;
    }
  }

  int toJson() => mojoEnumValue;
}

class _SyncedStoreServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class SyncedStore {
  static const String serviceName = "synced_store::SyncedStore";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _SyncedStoreServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static SyncedStoreProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    SyncedStoreProxy p = new SyncedStoreProxy.unbound();
    String name = serviceName ?? SyncedStore.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void authenticate(String username,void callback(AuthData authData, SyncedStoreStatus status));
  void put(Map<String, String> keyValues,void callback(SyncedStoreStatus status));
  void get(List<String> keys,void callback(Map<String, String> keyValues, SyncedStoreStatus status));
  void getByPrefix(List<String> keyPrefixes,void callback(Map<String, String> keyValues, SyncedStoreStatus status));
  void getByValueAttributes(String keyPrefix,String expectedFieldValues,void callback(Map<String, String> keyValues, SyncedStoreStatus status));
  void addObserver(String keyPrefix,String expectedFieldValues,SyncedStoreObserverInterface observer,void callback(SyncedStoreStatus status));
}

abstract class SyncedStoreInterface
    implements bindings.MojoInterface<SyncedStore>,
               SyncedStore {
  factory SyncedStoreInterface([SyncedStore impl]) =>
      new SyncedStoreStub.unbound(impl);

  factory SyncedStoreInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [SyncedStore impl]) =>
      new SyncedStoreStub.fromEndpoint(endpoint, impl);

  factory SyncedStoreInterface.fromMock(
      SyncedStore mock) =>
      new SyncedStoreProxy.fromMock(mock);
}

abstract class SyncedStoreInterfaceRequest
    implements bindings.MojoInterface<SyncedStore>,
               SyncedStore {
  factory SyncedStoreInterfaceRequest() =>
      new SyncedStoreProxy.unbound();
}

class _SyncedStoreProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<SyncedStore> {
  SyncedStore impl;

  _SyncedStoreProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _SyncedStoreProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _SyncedStoreProxyControl.unbound() : super.unbound();

  String get serviceName => SyncedStore.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _syncedStoreMethodAuthenticateName:
        var r = SyncedStoreAuthenticateResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.authData , r.status );
        break;
      case _syncedStoreMethodPutName:
        var r = SyncedStorePutResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.status );
        break;
      case _syncedStoreMethodGetName:
        var r = SyncedStoreGetResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.keyValues , r.status );
        break;
      case _syncedStoreMethodGetByPrefixName:
        var r = SyncedStoreGetByPrefixResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.keyValues , r.status );
        break;
      case _syncedStoreMethodGetByValueAttributesName:
        var r = SyncedStoreGetByValueAttributesResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.keyValues , r.status );
        break;
      case _syncedStoreMethodAddObserverName:
        var r = SyncedStoreAddObserverResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.status );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_SyncedStoreProxyControl($superString)";
  }
}

class SyncedStoreProxy
    extends bindings.Proxy<SyncedStore>
    implements SyncedStore,
               SyncedStoreInterface,
               SyncedStoreInterfaceRequest {
  SyncedStoreProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _SyncedStoreProxyControl.fromEndpoint(endpoint));

  SyncedStoreProxy.fromHandle(core.MojoHandle handle)
      : super(new _SyncedStoreProxyControl.fromHandle(handle));

  SyncedStoreProxy.unbound()
      : super(new _SyncedStoreProxyControl.unbound());

  factory SyncedStoreProxy.fromMock(SyncedStore mock) {
    SyncedStoreProxy newMockedProxy =
        new SyncedStoreProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static SyncedStoreProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For SyncedStoreProxy"));
    return new SyncedStoreProxy.fromEndpoint(endpoint);
  }


  void authenticate(String username,void callback(AuthData authData, SyncedStoreStatus status)) {
    if (impl != null) {
      impl.authenticate(username,callback);
      return;
    }
    var params = new _SyncedStoreAuthenticateParams();
    params.username = username;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((AuthData authData, SyncedStoreStatus status) {
        z.bindCallback(() {
          callback(authData, status);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _syncedStoreMethodAuthenticateName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void put(Map<String, String> keyValues,void callback(SyncedStoreStatus status)) {
    if (impl != null) {
      impl.put(keyValues,callback);
      return;
    }
    var params = new _SyncedStorePutParams();
    params.keyValues = keyValues;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((SyncedStoreStatus status) {
        z.bindCallback(() {
          callback(status);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _syncedStoreMethodPutName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void get(List<String> keys,void callback(Map<String, String> keyValues, SyncedStoreStatus status)) {
    if (impl != null) {
      impl.get(keys,callback);
      return;
    }
    var params = new _SyncedStoreGetParams();
    params.keys = keys;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((Map<String, String> keyValues, SyncedStoreStatus status) {
        z.bindCallback(() {
          callback(keyValues, status);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _syncedStoreMethodGetName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void getByPrefix(List<String> keyPrefixes,void callback(Map<String, String> keyValues, SyncedStoreStatus status)) {
    if (impl != null) {
      impl.getByPrefix(keyPrefixes,callback);
      return;
    }
    var params = new _SyncedStoreGetByPrefixParams();
    params.keyPrefixes = keyPrefixes;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((Map<String, String> keyValues, SyncedStoreStatus status) {
        z.bindCallback(() {
          callback(keyValues, status);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _syncedStoreMethodGetByPrefixName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void getByValueAttributes(String keyPrefix,String expectedFieldValues,void callback(Map<String, String> keyValues, SyncedStoreStatus status)) {
    if (impl != null) {
      impl.getByValueAttributes(keyPrefix,expectedFieldValues,callback);
      return;
    }
    var params = new _SyncedStoreGetByValueAttributesParams();
    params.keyPrefix = keyPrefix;
    params.expectedFieldValues = expectedFieldValues;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((Map<String, String> keyValues, SyncedStoreStatus status) {
        z.bindCallback(() {
          callback(keyValues, status);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _syncedStoreMethodGetByValueAttributesName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void addObserver(String keyPrefix,String expectedFieldValues,SyncedStoreObserverInterface observer,void callback(SyncedStoreStatus status)) {
    if (impl != null) {
      impl.addObserver(keyPrefix,expectedFieldValues,observer,callback);
      return;
    }
    var params = new _SyncedStoreAddObserverParams();
    params.keyPrefix = keyPrefix;
    params.expectedFieldValues = expectedFieldValues;
    params.observer = observer;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((SyncedStoreStatus status) {
        z.bindCallback(() {
          callback(status);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _syncedStoreMethodAddObserverName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _SyncedStoreStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<SyncedStore> {
  SyncedStore _impl;

  _SyncedStoreStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [SyncedStore impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _SyncedStoreStubControl.fromHandle(
      core.MojoHandle handle, [SyncedStore impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _SyncedStoreStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => SyncedStore.serviceName;


  Function _syncedStoreAuthenticateResponseParamsResponder(
      int requestId) {
  return (AuthData authData, SyncedStoreStatus status) {
      var result = new SyncedStoreAuthenticateResponseParams();
      result.authData = authData;
      result.status = status;
      sendResponse(buildResponseWithId(
          result,
          _syncedStoreMethodAuthenticateName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _syncedStorePutResponseParamsResponder(
      int requestId) {
  return (SyncedStoreStatus status) {
      var result = new SyncedStorePutResponseParams();
      result.status = status;
      sendResponse(buildResponseWithId(
          result,
          _syncedStoreMethodPutName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _syncedStoreGetResponseParamsResponder(
      int requestId) {
  return (Map<String, String> keyValues, SyncedStoreStatus status) {
      var result = new SyncedStoreGetResponseParams();
      result.keyValues = keyValues;
      result.status = status;
      sendResponse(buildResponseWithId(
          result,
          _syncedStoreMethodGetName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _syncedStoreGetByPrefixResponseParamsResponder(
      int requestId) {
  return (Map<String, String> keyValues, SyncedStoreStatus status) {
      var result = new SyncedStoreGetByPrefixResponseParams();
      result.keyValues = keyValues;
      result.status = status;
      sendResponse(buildResponseWithId(
          result,
          _syncedStoreMethodGetByPrefixName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _syncedStoreGetByValueAttributesResponseParamsResponder(
      int requestId) {
  return (Map<String, String> keyValues, SyncedStoreStatus status) {
      var result = new SyncedStoreGetByValueAttributesResponseParams();
      result.keyValues = keyValues;
      result.status = status;
      sendResponse(buildResponseWithId(
          result,
          _syncedStoreMethodGetByValueAttributesName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _syncedStoreAddObserverResponseParamsResponder(
      int requestId) {
  return (SyncedStoreStatus status) {
      var result = new SyncedStoreAddObserverResponseParams();
      result.status = status;
      sendResponse(buildResponseWithId(
          result,
          _syncedStoreMethodAddObserverName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _syncedStoreMethodAuthenticateName:
        var params = _SyncedStoreAuthenticateParams.deserialize(
            message.payload);
        _impl.authenticate(params.username, _syncedStoreAuthenticateResponseParamsResponder(message.header.requestId));
        break;
      case _syncedStoreMethodPutName:
        var params = _SyncedStorePutParams.deserialize(
            message.payload);
        _impl.put(params.keyValues, _syncedStorePutResponseParamsResponder(message.header.requestId));
        break;
      case _syncedStoreMethodGetName:
        var params = _SyncedStoreGetParams.deserialize(
            message.payload);
        _impl.get(params.keys, _syncedStoreGetResponseParamsResponder(message.header.requestId));
        break;
      case _syncedStoreMethodGetByPrefixName:
        var params = _SyncedStoreGetByPrefixParams.deserialize(
            message.payload);
        _impl.getByPrefix(params.keyPrefixes, _syncedStoreGetByPrefixResponseParamsResponder(message.header.requestId));
        break;
      case _syncedStoreMethodGetByValueAttributesName:
        var params = _SyncedStoreGetByValueAttributesParams.deserialize(
            message.payload);
        _impl.getByValueAttributes(params.keyPrefix, params.expectedFieldValues, _syncedStoreGetByValueAttributesResponseParamsResponder(message.header.requestId));
        break;
      case _syncedStoreMethodAddObserverName:
        var params = _SyncedStoreAddObserverParams.deserialize(
            message.payload);
        _impl.addObserver(params.keyPrefix, params.expectedFieldValues, params.observer, _syncedStoreAddObserverResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  SyncedStore get impl => _impl;
  set impl(SyncedStore d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_SyncedStoreStubControl($superString)";
  }

  int get version => 0;
}

class SyncedStoreStub
    extends bindings.Stub<SyncedStore>
    implements SyncedStore,
               SyncedStoreInterface,
               SyncedStoreInterfaceRequest {
  SyncedStoreStub.unbound([SyncedStore impl])
      : super(new _SyncedStoreStubControl.unbound(impl));

  SyncedStoreStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [SyncedStore impl])
      : super(new _SyncedStoreStubControl.fromEndpoint(endpoint, impl));

  SyncedStoreStub.fromHandle(
      core.MojoHandle handle, [SyncedStore impl])
      : super(new _SyncedStoreStubControl.fromHandle(handle, impl));

  static SyncedStoreStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For SyncedStoreStub"));
    return new SyncedStoreStub.fromEndpoint(endpoint);
  }


  void authenticate(String username,void callback(AuthData authData, SyncedStoreStatus status)) {
    return impl.authenticate(username,callback);
  }
  void put(Map<String, String> keyValues,void callback(SyncedStoreStatus status)) {
    return impl.put(keyValues,callback);
  }
  void get(List<String> keys,void callback(Map<String, String> keyValues, SyncedStoreStatus status)) {
    return impl.get(keys,callback);
  }
  void getByPrefix(List<String> keyPrefixes,void callback(Map<String, String> keyValues, SyncedStoreStatus status)) {
    return impl.getByPrefix(keyPrefixes,callback);
  }
  void getByValueAttributes(String keyPrefix,String expectedFieldValues,void callback(Map<String, String> keyValues, SyncedStoreStatus status)) {
    return impl.getByValueAttributes(keyPrefix,expectedFieldValues,callback);
  }
  void addObserver(String keyPrefix,String expectedFieldValues,SyncedStoreObserverInterface observer,void callback(SyncedStoreStatus status)) {
    return impl.addObserver(keyPrefix,expectedFieldValues,observer,callback);
  }
}

const int _syncedStoreObserverMethodOnChangeName = 0;

class _SyncedStoreObserverServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class SyncedStoreObserver {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _SyncedStoreObserverServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static SyncedStoreObserverProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    SyncedStoreObserverProxy p = new SyncedStoreObserverProxy.unbound();
    String name = serviceName ?? SyncedStoreObserver.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void onChange(Map<String, String> changes,void callback());
}

abstract class SyncedStoreObserverInterface
    implements bindings.MojoInterface<SyncedStoreObserver>,
               SyncedStoreObserver {
  factory SyncedStoreObserverInterface([SyncedStoreObserver impl]) =>
      new SyncedStoreObserverStub.unbound(impl);

  factory SyncedStoreObserverInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [SyncedStoreObserver impl]) =>
      new SyncedStoreObserverStub.fromEndpoint(endpoint, impl);

  factory SyncedStoreObserverInterface.fromMock(
      SyncedStoreObserver mock) =>
      new SyncedStoreObserverProxy.fromMock(mock);
}

abstract class SyncedStoreObserverInterfaceRequest
    implements bindings.MojoInterface<SyncedStoreObserver>,
               SyncedStoreObserver {
  factory SyncedStoreObserverInterfaceRequest() =>
      new SyncedStoreObserverProxy.unbound();
}

class _SyncedStoreObserverProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<SyncedStoreObserver> {
  SyncedStoreObserver impl;

  _SyncedStoreObserverProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _SyncedStoreObserverProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _SyncedStoreObserverProxyControl.unbound() : super.unbound();

  String get serviceName => SyncedStoreObserver.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _syncedStoreObserverMethodOnChangeName:
        var r = SyncedStoreObserverOnChangeResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_SyncedStoreObserverProxyControl($superString)";
  }
}

class SyncedStoreObserverProxy
    extends bindings.Proxy<SyncedStoreObserver>
    implements SyncedStoreObserver,
               SyncedStoreObserverInterface,
               SyncedStoreObserverInterfaceRequest {
  SyncedStoreObserverProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _SyncedStoreObserverProxyControl.fromEndpoint(endpoint));

  SyncedStoreObserverProxy.fromHandle(core.MojoHandle handle)
      : super(new _SyncedStoreObserverProxyControl.fromHandle(handle));

  SyncedStoreObserverProxy.unbound()
      : super(new _SyncedStoreObserverProxyControl.unbound());

  factory SyncedStoreObserverProxy.fromMock(SyncedStoreObserver mock) {
    SyncedStoreObserverProxy newMockedProxy =
        new SyncedStoreObserverProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static SyncedStoreObserverProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For SyncedStoreObserverProxy"));
    return new SyncedStoreObserverProxy.fromEndpoint(endpoint);
  }


  void onChange(Map<String, String> changes,void callback()) {
    if (impl != null) {
      impl.onChange(changes,callback);
      return;
    }
    var params = new _SyncedStoreObserverOnChangeParams();
    params.changes = changes;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _syncedStoreObserverMethodOnChangeName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _SyncedStoreObserverStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<SyncedStoreObserver> {
  SyncedStoreObserver _impl;

  _SyncedStoreObserverStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [SyncedStoreObserver impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _SyncedStoreObserverStubControl.fromHandle(
      core.MojoHandle handle, [SyncedStoreObserver impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _SyncedStoreObserverStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => SyncedStoreObserver.serviceName;


  Function _syncedStoreObserverOnChangeResponseParamsResponder(
      int requestId) {
  return () {
      var result = new SyncedStoreObserverOnChangeResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _syncedStoreObserverMethodOnChangeName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _syncedStoreObserverMethodOnChangeName:
        var params = _SyncedStoreObserverOnChangeParams.deserialize(
            message.payload);
        _impl.onChange(params.changes, _syncedStoreObserverOnChangeResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  SyncedStoreObserver get impl => _impl;
  set impl(SyncedStoreObserver d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_SyncedStoreObserverStubControl($superString)";
  }

  int get version => 0;
}

class SyncedStoreObserverStub
    extends bindings.Stub<SyncedStoreObserver>
    implements SyncedStoreObserver,
               SyncedStoreObserverInterface,
               SyncedStoreObserverInterfaceRequest {
  SyncedStoreObserverStub.unbound([SyncedStoreObserver impl])
      : super(new _SyncedStoreObserverStubControl.unbound(impl));

  SyncedStoreObserverStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [SyncedStoreObserver impl])
      : super(new _SyncedStoreObserverStubControl.fromEndpoint(endpoint, impl));

  SyncedStoreObserverStub.fromHandle(
      core.MojoHandle handle, [SyncedStoreObserver impl])
      : super(new _SyncedStoreObserverStubControl.fromHandle(handle, impl));

  static SyncedStoreObserverStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For SyncedStoreObserverStub"));
    return new SyncedStoreObserverStub.fromEndpoint(endpoint);
  }


  void onChange(Map<String, String> changes,void callback()) {
    return impl.onChange(changes,callback);
  }
}



