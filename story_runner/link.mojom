// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file contains the definition of Link as well as the structure
// of the data it holds.

module modular;

import "apps/maxwell/document_store/interfaces/document.mojom";

// This interface is implemented by the story runner. The Session
// service instance acts as a factory for it.
//
// An instance of Link holds a document, expressed as an instance of
// document_store.Document. The document is structured, however right now the
// document is only set and read as a whole, but deltas will be supported soon.
//
// Each module receives a handle to one instance of Link at startup.
// This instance is shared with the module that requested the start of
// the module. A module can create additional Link instances through
// the Session handle that it also receives at startup. Why would it
// do that? For example to share the Link instance with modules it
// requests to start in turn.
//
// A client of Link can set the Document stored in the instance and
// register a handler (an implementation of the LinkChanged interface)
// to be notified of changes to the Value. A client is not notified of
// changes it itself makes to the Link document. More specifically, a
// watcher registered on one handle to a Link instance is not notified
// of changes made *through the same handle*.
//
// A client may obtain another handle to the same Link instance using
// the Dup() method. The primary purpose of this is to be able to
// retain one handle and pass another handle to a StartModule()
// request. (In Mojo, once a handle is passed as argument to a method,
// it's gone from the caller.)
//
// The Dup() method can also be used to create an extra handle to
// register a watcher on. If the changes to the Link value are made
// through the original handle, the watcher is notified of all such
// changes.
//
// No service name: created by Session.
interface Link {
  // In the current simplified implementation, the Link contains a single
  // Document, which is null when the Link is created. This AddDocument()
  // function overwrites the document with the given Document. Watchers
  // will be notified.  It's not currently possible to reset the Document
  // back to null.
  AddDocument(document_store.Document value);

  // Obtains the current document. If AddDocument() was not yet called, the
  // value returned is null.
  Query() => (document_store.Document? value);

  // Registers a watcher, which is notified whenever the document
  // changes. If the value is not null at the time the watcher is
  // registered, the Notify() callback method is invoked with the
  // current document.
  Watch(LinkChanged watcher);

  // Like Watch(), but the watcher is notified also of changes made
  // through the same handle as the watcher is registered on.
  WatchAll(LinkChanged watcher);

  // Obtains another handle for the same Link instance. Can be used to
  // keep a reference to a Link instance and pass it as an argument to
  // another service.
  Dup(Link& dup);
};

// This interface is meant to be implemented by a client of Link.
//
// The Value() method is invoked whenever the value changes. If the
// value is not null at the time the watcher is registered, Value() is
// called with the current value immediately.
//
// No service name: created by Module.
interface LinkChanged {
  Notify(document_store.Document document);
};
