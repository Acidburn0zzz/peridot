// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "apps/modular/story_runner/link.mojom";


// This service is implemented by a mojo app that is meant to be run
// in a story.
//
// The Session service implementation of the story runner when
// requested through StartModule() runs the app, requests the Module
// service it provides, and if it obtains one, calls Initialize().
//
// The arguments to Initialize() are a handle of the Session instance
// that created the Module, and a Link instance provides by the caller
// of StartModule(). The Link instance can be used to exchange data
// with the calling module. The Session service can be used to start
// more Modules, and to create Link instances to share with those
// Modules.
[ServiceName="modular.Module"]  // Created by each module app.
interface Module {
  Initialize(Session session, Link link);
};

// This interface is implemented by the story runner application. The
// service is used to run modules and initialize them with shared
// data.
//
// No service name: created by StoryRunner.
interface Session {
  // Creates a new Link instance. The Link instance can be shared with
  // a newly created Module by passing it to StartModule(). In order
  // to also retain a reference to the same Link instance, a duplicate
  // must be created using the Dup() method of Link.
  CreateLink(Link& link);

  // Starts a new module. The query identifies the module in some way.
  // Currently, it's just the URL of the mojo executable, but in the
  // future it might for example be a specification of a data schema
  // the module can provide or consume.
  //
  // The implementation of StartModule() invokes Initialize() on the
  // created Module instance, so it must return it and cannot take an
  // interface request.
  StartModule(string query, Link link) => (Module module_instance);
};
