// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "lib/story/fidl/chain.fidl";
import "lib/module/fidl/link_path.fidl";

// The Daisy struct is a runtime descriptor for an abstract action to be initiated
// in Fuchsia. For details please see docs/daisy.md.
struct Daisy {
  string? verb;

  // A list of zero or more Nouns, keyed by the noun's name in |verb|'s
  // definition, from which Entity type constraints are derived. If no |verb|
  // is provided, and thus no verb definition is available, the keys are
  // ignored. The type derivation process depends on which field in each of
  // |nouns| is set. See Noun below for details.
  //
  // In the cases where this Daisy is used for Module Resolution (see
  // module_resolver.fidl) and |entity| or |text| are set on the Noun, the
  // value is additionally used to initialize the Entity references on Link to
  // the Module that is selected after resolution.
  map<string, Noun> nouns;

  // string json_parameters;
  // array<string> required_services;
};

// As stated above, this structure serves two purposes:
//
// 1) It directly or indirectly provides type constraints for nouns (arguments
// passed to/from a Module instance) during the process of Module Resolution.
//
// 2) Provides Entity instances, or data from which Entity instances can be
// derived, to initialize a Module after it has been selected through Module
// Resolution.
//
// TODO(thatguy): This structure is used both for the API from Modules ->
// Framework, as well as Framework -> ModuleResolver. Modules reference Links
// simply by their local short name, whereas the Framework references Links by
// their full path. It's awkward to force these both into the same struct, so
// consider splitting this into two structs explicitly (Daisy and DaisyInternal).
union Noun {
  // Set this if you already have an Entity reference at runtime.
  // Entity.getTypes() will be used to set the constraints for this noun during
  // resolution.
  string entity_reference;

  // Set this if you have structured JSON data. Values typically are a JSON
  // object with a "@type" attribute and other associated data.  TODO(thatguy):
  // We need to decide if we want to keep this in place, or deprecate this
  // eventually and move entirely to using Entity references.
  //
  // DEPRECATED: Use |entity_reference|.
  string json;

  // Set this if you want to explicitly define this noun's allowed types. This
  // is also useful in the cases where the noun has a 'direction' of type
  // 'output', and you wish to set the allowable output types from the Module
  // (see docs/modular/manifests/verb_template.md for a definition of
  // 'direction').
  //
  // Only one entry in |entity_type| must match the constraint specified by
  // the Module for the constraint to be considered satisfied.
  array<string> entity_type;

  // This allows a Noun to directly reference a Link. Modules should only set
  // |link.name|. The Framework will resolve the referenced Link to its actual
  // storage path.
  LinkPath link;
};
