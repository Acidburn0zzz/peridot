// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "lib/app/fidl/service_provider.fidl";
import "lib/ledger/fidl/ledger.fidl";
import "lib/agent/fidl/agent_controller/agent_controller.fidl";
import "lib/component/fidl/message_queue.fidl";
import "lib/entity/fidl/entity_resolver.fidl";
import "lib/entity/fidl/entity_store.fidl";

// Provided to all components in their respective intialization methods by the
// framework. For example, a Module gets it in Module::Initialize() and an Agent
// gets it in Agent::Initialize().
interface ComponentContext {
  // Gets the Ledger associated with this component. This ledger instance
  // is unique to this component under this user.
  GetLedger(ledger.Ledger& request) => (ledger.Status status);

  // Used to start a new agent in the user scope and connect to it.
  ConnectToAgent(string url, app.ServiceProvider& incoming_services,
                 AgentController& controller);

  // Used to create / delete a message queue or retrieve an existing queue
  // identified by |name|. |name| has to be unique only within the scope of the
  // calling component instance.
  ObtainMessageQueue(string name, MessageQueue& queue);
  DeleteMessageQueue(string name);

  // Get a MessageSender service that can be used to send a message to a queue
  // identified by |queue_token|. Token for a MessageQueue is obtained from its
  // GetToken() method and the token is unique within the scope of the user.
  GetMessageSender(string queue_token, MessageSender& sender);

  GetEntityResolver(EntityResolver& request);
  GetEntityStore(EntityStore& request);
};
