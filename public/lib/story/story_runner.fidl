// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "apps/modular/services/story/resolver.fidl";
import "apps/modular/services/story/story.fidl";
import "apps/modular/services/story/story_storage.fidl";
import "apps/ledger/services/ledger.fidl";

// A service to create Story instances configured with services they
// need. To the client of this service, the story is exposed through
// the StoryContext interface. Modules in this story only get to access
// the Story service, which is more restricted as it has no Stop()
// method.
//
// This is the main service implemented by the story runner app.
[ServiceName="modular.StoryRunner"]  // Created by story_runner app.
interface StoryRunner {
  CreateStory(Resolver resolver, StoryStorage story_storage,
              StoryContext& story_context,
              ledger.LedgerRepository user_repository);
};

// This interface is exposed to clients of the StoryRunner. It allows
// its client everything the Story interface allows (by accessing the
// Story interface through GetStory()), plus stopping the Story.
interface StoryContext {
  // Gives access to the Story interface to start modules etc.
  GetStory(Story& story);

  // Stops all Module and Link instances in this Story. Returns when
  // everything is torn down. The story implementation is deleted only
  // when the pipe to it closes. If the pipe closes before Stop() is
  // called, the story is torn down too, but no indication can be
  // obtained by the client as to when the teardown is complete
  // (except by notification from LinkWatcher or ModuleWatcher
  // instances held by the client).
  Stop() => ();
};
