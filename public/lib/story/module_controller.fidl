// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

// This interface is used by the caller of Story.StartModule() to
// control the started Module instance.
//
// Closing this connection affects neither its ModuleWatchers nor its
// Module instance; it just relinquishes the ability of the caller to
// control the Module instance.
interface ModuleController {
  // Registers a watcher that is notified when the module is done or
  // otherwise stops.
  Watch(ModuleWatcher watcher);

  // Requests the Module instance to stop (see Module.Stop() for how).
  Stop() => ();
};

// This interface is implemented by the client calling
// ModuleController::Watch().
interface ModuleWatcher {
  // Called when the module instance calls Done() on its Story handle.
  // The receiver is free to decide whether it's appropriate to Stop()
  // the module. (It might be appropriate for the receiver to call
  // Done() on its own instead.)
  OnDone();

  // Called after the module instance is stopped. See Module.Stop()
  // for when this can happen, and what else happens then.
  OnStop();
};
