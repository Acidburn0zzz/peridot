// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "apps/modular/services/story/link.fidl";
import "apps/modular/services/story/module_controller.fidl";
import "apps/mozart/services/views/view_token.fidl";

// This interface is exposed to all modules in a story. It allows to
// create Link instances and run Module instances.
interface Story {
  // Creates a new Link instance. The Link instance can be shared with
  // a newly created Module by passing it to StartModule(). In order
  // to also retain a reference to the same Link instance, a duplicate
  // must be created using the Dup() method of Link.
  //
  // The link instance has a name so that it can be recognized when
  // the story is restored. Right now it's up to the module to
  // ensure the name is unique within the scope of the story.
  //
  // TODO(mesch): We can scope it to the module, or the Link instance
  // the module was initialized with, or both, but two things are
  // tricky when done naively:
  //
  //   1. the initial Link might not be unique to this module instance,
  //
  //   2. obtaining the name of a parent link would be asynchronous.
  //
  // For now, the name is scoped to the story.
  CreateLink(string name, Link& link);

  // Starts a new module. The query identifies the module in some way.
  // Currently, it's just the URL of the application executable, but
  // in the future it might for example be a specification of a data
  // schema the module can provide or consume.
  StartModule(string query, Link link, ModuleController& module_controller,
              mozart.ViewOwner& view_owner);

  // The module holding this handle to the Story declares it's done
  // and wants to be torn down. The story implementation notifies all
  // ModuleWatchers registered on the ModuleController by calling
  // OnDone(), and then calls Stop() on the Module, which in turn
  // notifies all ModuleWatchers with OnStop().
  Done();
};
