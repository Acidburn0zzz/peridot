// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "apps/modular/services/document_store/document.fidl";
import "apps/modular/services/story/link.fidl";
import "apps/mozart/services/views/view_token.fidl";

// This service is implemented by an application that is meant to be
// run in a story.
//
// The Story service implementation of the story runner when requested
// through StartModule() runs the app, requests the Module service it
// provides, and if it obtains one, calls Initialize().
//
// The arguments to Initialize() are a handle of the Story instance
// that created the Module, and a Link instance provided by the caller
// of StartModule(). The Link instance can be used to exchange data
// with the calling module. The Story service can be used to start
// more Modules, and to create Link instances to share with those
// Modules.
[ServiceName="modular.Module"]  // Created by each module app.
interface Module {
  Initialize(Story story, Link link);
};


// A handle of this interface is held by the client of Story that
// requests the start of a module using StartModule().
//
// It can be used to register a watcher to be notified when the module
// stops.
//
// It can also be used to request the module to stop. To accomplish
// that, just close the handle to the ModuleController.
interface ModuleController {
  // Registers a watcher that is notified when the module stops.
  Watch(ModuleWatcher watcher);
};

// This interface is implemented by the client calling
// ModuleController::Watch().
interface ModuleWatcher {
  // Called when the module instance is stopped.
  Done();
};

// This interface is implemented by the story runner application. The
// service is used to run modules and initialize them with shared
// data.
//
// No service name: created by StoryRunner.
interface Story {
  // Creates a new Link instance. The Link instance can be shared with
  // a newly created Module by passing it to StartModule(). In order
  // to also retain a reference to the same Link instance, a duplicate
  // must be created using the Dup() method of Link.
  //
  // The link instance has a name so that it can be recognized when
  // the session is restored. Right now it's up to the module to
  // ensure the name is unique within the scope of the session.
  //
  // TODO(mesch): We can scope it to the module, or the Link instance
  // the module was initialized with, or both, but two things are
  // tricky when done naively:
  //
  //   1. the initial Link might not be unique to this module instance,
  //
  //   2. obtaining the name of a parent link would be asynchronous.
  //
  // For now, the name is scoped to the session.
  CreateLink(string name, Link& link);

  // Starts a new module. The query identifies the module in some way.
  // Currently, it's just the URL of the mojo executable, but in the
  // future it might for example be a specification of a data schema
  // the module can provide or consume.
  //
  // The implementation of StartModule() invokes Initialize() on the
  // created Module instance.
  StartModule(string query, Link link, ModuleController& module_controller,
              mozart.ViewOwner& view_owner);

  // The module holding this handle to the Story declares it's done
  // and wants to be torn down. This causes the story runner to take
  // down the Module instance this handle was passed to, and it
  // notifies the ModuleController of the Story client that requested
  // this Module to be started. This causes Done() to be called on all
  // the module watchers registered on this Module's ModuleController.
  Done();
};

// Internal state of the session, used for storage in Ledger.
// immediate motivation to use this service is that Ledger crashes
// <https://fuchsia.atlassian.net/browse/LE-46>, so we use an
// implementation of this service that does not write to ledger to
// experiment with session persistence. The abstraction might be
// useful anyway, but is certain to change as persistence evolves.
// TODO(mesch/jimbe): Use document store instead of ledger?
interface StoryStorage {
  ReadStoryData() => (StoryData? data);
  WriteStoryData(StoryData data);
};

struct StoryData {
  map<string, LinkData> links;
};

struct LinkData {
  array<document_store.Document> docs;
};
