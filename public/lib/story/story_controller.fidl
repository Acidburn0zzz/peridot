// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "apps/modular/services/module/module_data.fidl";
import "apps/modular/services/story/link.fidl";
import "apps/modular/services/story/story_info.fidl";
import "apps/modular/services/story/story_state.fidl";
import "apps/modular/services/surface/surface.fidl";
import "apps/mozart/services/views/view_token.fidl";

// Used by the clients of StoryProvider (UserShell) to interact with a single
// story. Created by StoryProvider.
//
// If |StoryController| is closed, the |StoryState| associated with this story
// does not change.
interface StoryController {
  // Gets information associated with the story.
  GetInfo() => (StoryInfo info, StoryState state);

  // Stores extra information associated with the story, like title, color,
  // etc. Available in the |extra| field in StoryInfo.
  SetInfoExtra(string name, string value) => ();

  // Runs the story controlled by this |StoryController| instance if not yet
  // running or requested to start, else does nothing. |view_owner| is an
  // interface request for the view of the story shell of this story. If the
  // story is already running, the view owner request is dropped. If Stop()
  // requests are pending when this request is issued, the request is queued
  // until the Stop() requests complete.
  Start(mozart.ViewOwner& view_owner);

  // Stops this story if it is running, else does nothing. Returns when the
  // story is stopped.
  Stop() => ();

  // Registers a watcher for changes of the story state.
  Watch(StoryWatcher watcher);

  // Adds and starts a module in the story.
  //
  // The view of this module is sent to the story shell. Providing a
  // |surface_relation| advises the StoryShell how to layout surfaces that the
  // new module creates.
  //
  // The module path (the concatenation of the |parent_module_path| and
  // |module_name|) is used to persistently associate this module instance with
  // component message queues and links throughout subsequent runs of the story.
  //
  // |parent_module_path| specifies the module instance to make this module a
  // child of. If empty the module is added as a root module.
  //
  // The link to be used for the module is identified by the
  // |parent_module_path| and |link_name| as used in calls to GetLink(). Using
  // that method, the link can be configured with data before running the
  // module.
  //
  // TODO(mesch): Some form of ModuleController might be useful here, e.g. for
  // status notifications.
  AddModule(array<string> parent_module_path, string module_name,
            string module_url, string link_name,
            SurfaceRelation? surface_relation);

  // Lists all modules in the story. Notifications for changes to this set can
  // be obtained from StoryWatcher.OnModuleAdded().
  GetModules() => (array<ModuleData> module_data);

  // Gets a connection to the named Link in the story.
  //
  // Any link, if it doesn't exist yet, is implicitly created when it's first
  // accessed.
  //
  // The name of the link to the root module (i.e. the module whose URL is
  // passed to StoryProvider.CreateStory*()) is "root", and it's implicitly
  // created when the story is created by StoryProvider.CreateStory(), and also
  // populated with data if the story is created with
  // StoryProvider.CreateStoryWithInfo().
  //
  // The |module_path| identifies the module to which the Link is accessible
  // through ModuleContext.GetLink(). Normally that is the module that created
  // the Link, but the Link might have been created and populated here before
  // it's first accessed by a module.
  //
  // For the links leading to top level modules (specifically for the "root"
  // link to the root module), the |module_path| is empty.
  GetLink(array<string> module_path, string link_name, Link& link);
};

// Implemented by the client calling StoryController.Watch().
interface StoryWatcher {
  // Called with the current state right after registration, and subsequently
  // when the state changes.
  OnStateChange(StoryState new_state);

  // Called when a module is added to a story.
  OnModuleAdded(ModuleData module_data);
};
