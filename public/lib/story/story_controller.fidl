// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "apps/modular/services/module/module_data.fidl";
import "apps/modular/services/story/link.fidl";
import "apps/modular/services/story/story_info.fidl";
import "apps/modular/services/story/story_state.fidl";
import "apps/mozart/services/views/view_token.fidl";

// Used by the clients of StoryProvider (UserShell) to interact with a
// single story. Created by StoryProvider.
//
// If |StoryController| is closed, the |StoryState| associated with this story
// will not change.
interface StoryController {
  // Gets information associated with the story.
  GetInfo() => (StoryInfo info, StoryState state);

  // Stores extra information associated with the story, like title,
  // color, etc. Available in the |extra| field in StoryInfo.
  SetInfoExtra(string name, string value) => ();

  // Runs the |Story| controlled by this |StoryController| instance if
  // not yet running or requested to start, else does nothing.
  // |view_owner| is an interface request for the view of the story
  // shell of this story. If Stop() requests are pending when this
  // request is issued, the request is queued until the Stop() request
  // completes.
  Start(mozart.ViewOwner& view_owner);

  // Gets a connection to the named Link in the story. The name of the
  // root link is "root", and it's implicitly created when the story
  // is created. Any other link, if it doesn't exist yet, is
  // implicitly created. The module_path identifies the module that created
  // the link. For the links leading to top level modules (specifically for the
  // "root" link to the "root" module), this path is empty.
  GetLink(array<string> module_path, string name, Link& link);

  // Stops this story if it is running, else does nothing. Returns
  // when the story is stopped.
  Stop() => ();

  // Registers a listener for changes of the story state.
  Watch(StoryWatcher watcher);

  // Adds and starts a module to the story. The view of this module is sent to
  // the story shell. The absolute module path (the concatenation of the
  // |module_path| and module |name|) is used to reinflate component
  // message queues and Links on subsequent runs of the story.
  // The module_path specifies the module instance to make this module a
  // child of. If empty it will be added as a root module. The Link to be
  // used for the module is identified by its name as used in calls to GetLink()
  // using that method, the link can be configured with data before running the
  // module. This |link_name| is scoped to the module_path provided.
  // TODO(mesch): The link name should really be a link path, so that a module
  // can be attached to any link in the story.
  // TODO(mesch): Some form of ModuleController might be useful here, e.g. for
  // status notifications.
  AddModule(array<string> module_path, string name, string url,
            string link_name);

  // Gets all of the modules in the story.
  GetModules() => (array<ModuleData> module_data);
};

// This interface is implemented by the client calling
// StoryController::Watch().
interface StoryWatcher {
  // Called with the current state right after registration, and
  // subsequently when the state changes.
  OnStateChange(StoryState new_state);

  // Called when a module is added to a story.
  OnModuleAdded(ModuleData module_data);
};
