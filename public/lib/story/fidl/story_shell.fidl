// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "lib/ui/views/fidl/view_token.fidl";
import "lib/surface/fidl/surface.fidl";

// This interface is implemented by a story shell. Dependencies are passed to it
// in Initialize() on startup. The story shell is also expected to implement
// Lifecycle in order to receive a Terminate() call on teardown.
//
// In one component instance there can only be one StoryShell service instance.
// The ViewOwner request is sent to the separate ViewProvider service. This way,
// the story shell may be implemented as a flutter app.
//
// Teardown may be initiated by the user shell calling StoryController.Stop(),
// by the user runner being terminated, or by the system shutting down.
[ServiceName="modular.StoryShell"]  // Created by story shell applications.
interface StoryShell {
  Initialize@0(StoryContext story_context);

  // Registers a new view to be displayed by the StoryShell. More context that
  // allows the story shell to decide how to layout will be added later. Also,
  // interface to influence life cycle and focus is obviously missing.
  ConnectView@1(mozart.ViewOwner owner, string view_id, string parent_id,
                SurfaceRelation? surface_relation);

  // Focuses the view with view_id, bringing it to the foreground. Optionally
  // provide a relative_view_id to focus relative to another view instead of
  // absolutely.
  FocusView@2(string view_id, string? relative_view_id);

  // Defocuses the view with view_id, dismissing it to the background.
  DefocusView@3(string view_id) => ();
};

// This interface provides the StoryShell instance with everything it needs to
// know or be able to do about the Story. Not much right now, but we expect this
// to increase.
interface StoryContext {};
