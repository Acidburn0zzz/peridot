// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

// The abstraction provided internally by UserRunner to StoryRunner
// for state persistence.
interface StoryStorage {
  ReadLinkData(string link_id) => (LinkData? data);
  WriteLinkData(string link_id, LinkData data) => ();
  WatchLink(string link_id, StoryStorageLinkWatcher watcher);
  Dup(StoryStorage& dup);  // gives a connection to every Link
  Sync() => ();  // Waits for all previously queued operations to complete
};

interface StoryStorageLinkWatcher {
  // Called when the link data has changed in the underlying ledger
  // page. For now, Link data are never deleted from a story, they
  // just stop changing when they are no longer accessed by any Link
  // instance.
  OnChange(LinkData changed);
};

struct LinkData {
  // The data stored in one Link instance.
  string json;
};
