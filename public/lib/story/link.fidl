// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file contains the definition of Link as well as the structure
// of the data it holds.

module modular;

// This interface is implemented by the story runner. The Story
// service instance acts as a factory for it.
//
// An instance of Link holds a JSON string that can be modified incrementally
// or completely overwritten, depending on the use of Set() and Update().
// A Link contains a JSON string, which is "null" when the Link is created.
//
// Each module receives a handle to one instance of Link at startup.
// This instance is shared with the module that requested the start of
// the module. A module can create additional Link instances through
// the Story handle that it also receives at startup. Why would it
// do that? For example to share the Link instance with modules it
// requests to start in turn.
//
// A client of Link can set the JSON string stored in the instance and
// register a handler (an implementation of the LinkWatcher interface) to be
// notified of changes to the JSON string in the Link. A client may or may not
// notified of changes it itself makes to the Link document, depending on
// whether it registers with WatchAll() or Watch(), respectively. If the client
// registers with Watch(), then it will not be notified of changes made
// *through the same handle*.
//
// A client may obtain another handle to the same Link instance using
// the Dup() method. The primary purpose of this is to be able to
// retain one handle and pass another handle to a StartModule()
// request. (In Fidl, once a handle is passed as argument to a method,
// it's gone from the caller.)
//
// The Dup() method can also be used to create an extra handle to
// register a watcher on. If the changes to the Link value are made
// through the original handle, the watcher is notified of all such
// changes.
//
// For |path|, the caller must escape slashes in segments as ~1
// and escape tildes as ~0.
//
// No service name: created by Story.
//
// TODO(jimbe) Add error reporting for JSON and Pointer errors.
interface Link {

  // Gets the value at the given |path|, which is represented using the
  // JSON Pointer specification (https://tools.ietf.org/html/rfc6901).
  // Returns a null fidl string if |path| does not exist.
  // Calling Get("") on an empty Link will return the string "null".
  Get(string path) => (string? json);

  // Set() overwrites the value/object/array at the given |path|. Set also
  // overwrites any values or arrays as necessary to ensure that |path| exists.
  // To replace the root, pass "" for |path|.
  // This call notifies Watchers.
  Set(string path, string json);

  // For each member of the object defined by |json|, set or overwrite the
  // same member of the object found at |path| with that member's value.
  // For example:
  // Object at |path|: {"x":3,"name":"Joe"}
  // |json|: {"name":"Tom","y":5.9}
  // Resulting object at |path| after UpdateObject():
  //   {"x":3,"name":"Tom","y":5.9}
  // If |path| points at a null value, the null value is overwritten with the
  // object in |json|.
  // |path| will be created if it does not exist. Overwrites any
  // values or arrays as necessary to ensure that |path| exists.
  // To set a value or an array, use Set() instead.
  // The string in |json| must represent an object.
  // To update the root (must be an object or null), pass "" for |path|.
  // This call notifies Watchers.
  UpdateObject(string path, string json);

  // Erases the object at the given |path|. If the path is not found or does not
  // match the current structure of the JSON, the path will not be created and
  // the call is ignored.
  // This call notifies Watchers.
  Erase(string path);

  // Registers a watcher, which is notified whenever the document changes. This
  // watcher will not be invoked for changes caused by calls made on this
  // handle. The Notify() callback method will be immediately invoked with
  // all documents in the Link, even if it's empty.
  Watch(LinkWatcher watcher);

  // Like Watch(), but the watcher is notified also of changes made
  // through the same handle as the watcher is registered on.
  WatchAll(LinkWatcher watcher);

  // Obtains another handle for the same Link instance. Can be used to
  // keep a reference to a Link instance and pass it as an argument to
  // another service.
  Dup(Link& dup);

  // Allows to await completion of previously pipelined requests, to
  // create sequentiality across service instances without giving
  // every operation an empty return value. Used to gate an operation
  // on another service (like StoryRunner.Stop()) that would actually
  // tear down this service on state being persistent.
  Sync() => ();
};

// This interface is meant to be implemented by a client of Link.
//
// The Notify() method is invoked whenever the Link changes. The entire
// JSON string in the Link will be sent. In other words, this isn't an
// incremental notification. |json| cannot be null because an empty Link
// is the valid JSON document "null".
//
// No service name: created by Module.
interface LinkWatcher {
  Notify(string json);
};
