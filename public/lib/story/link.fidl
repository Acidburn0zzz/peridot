// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file contains the definition of Link as well as the structure
// of the data it holds.

module modular;

import "apps/modular/services/document_store/document.fidl";

// This interface is implemented by the story runner. The Story
// service instance acts as a factory for it.
//
// An instance of Link holds documents, expressed as an map of string to
// document_story.Document. The document has individual properties that can
// be incrementally updated with AddDocuments() or overwritten in toto with
// SetAllDocuments().
// TODO(jimbe) Expand support for incremental operations (remove properties).
// TODO(jimbe) Add support for multivalued properties (sets and arrays).
//
// Each module receives a handle to one instance of Link at startup.
// This instance is shared with the module that requested the start of
// the module. A module can create additional Link instances through
// the Story handle that it also receives at startup. Why would it
// do that? For example to share the Link instance with modules it
// requests to start in turn.
//
// A client of Link can set the Documents stored in the instance and
// register a handler (an implementation of the LinkWatcher interface)
// to be notified of changes to Documents in the Link. A client may or may not
// notified of changes it itself makes to the Link document, depending on
// whether it registers with WatchAll() or Watch(), respectively. If the client
// registers with Watch(), then it will not be notified of changes made
// *through the same handle*.
//
// A client may obtain another handle to the same Link instance using
// the Dup() method. The primary purpose of this is to be able to
// retain one handle and pass another handle to a StartModule()
// request. (In Mojo, once a handle is passed as argument to a method,
// it's gone from the caller.)
//
// The Dup() method can also be used to create an extra handle to
// register a watcher on. If the changes to the Link value are made
// through the original handle, the watcher is notified of all such
// changes.
//
// No service name: created by Story.
interface Link {
  // The Link contains a collection of Documents, which is empty when the Link
  // is created. AddDocuments() incrementally adds the given values to
  // the Link. Watchers will be notified if any statements actually changed.
  // In the case of duplicate document ids, the properties will be merged,
  // with a last-one-wins rule for handling duplicates.
  AddDocuments(map<string, document_store.Document> docs);

  // The Link contains a collection of Documents, which is empty when the Link
  // is created. SetAllDocuments() rewrites the Link to the given values.
  // Watchers will be notified if any statements actually changed. In the
  // case of duplicate docids, only the last document will be kept.
  // All properties in earlier Documents with that docid will be discarded.
  SetAllDocuments(map<string, document_store.Document> docs);

  // Obtains all documents. If either SetAllDocument() or AddDocuments() were
  // not yet called, the map returned is empty.
  Query() => (map<string, document_store.Document> docs);

  // Registers a watcher, which is notified whenever the document changes. This
  // watcher will not be invoked for changes caused by calls made on this
  // handle. The Notify() callback method will be immediately invoked with
  // all documents in the Link, even if it's empty.
  Watch(LinkWatcher watcher);

  // Like Watch(), but the watcher is notified also of changes made
  // through the same handle as the watcher is registered on.
  WatchAll(LinkWatcher watcher);

  // Obtains another handle for the same Link instance. Can be used to
  // keep a reference to a Link instance and pass it as an argument to
  // another service.
  Dup(Link& dup);

  // Allows to await completion of previously pipelined requests, to
  // create sequentiality across service instances without giving
  // every operation an empty return value. Used to gate an operation
  // on another service (like StoryRunner.Stop()) that would actually
  // tear down this service on state being persistent.
  Sync() => ();
};

// This interface is meant to be implemented by a client of Link.
//
// The Notify() method is invoked whenever the Link changes. All documents
// in the Link will be sent. In other words, this isn't an incremental
// notification.
//
// No service name: created by Module.
interface LinkWatcher {
  Notify(map<string, document_store.Document> docs);
};
