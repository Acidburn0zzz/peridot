// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module maxwell;

import "metadata.fidl";
import "value.fidl";
import "value_type.fidl";

[ServiceName="maxwell.ContextWriter"]
interface ContextWriter {
  // Creates and returns a ContextValueWriter for a future value of |type|,
  // allowing the client to set and update the contents at a later time.  The
  // value is removed from the Context service when |value_writer| is closed or
  // a connection error occurs.
  CreateValue(ContextValueWriter& value_writer, ContextValueType type);

  // Adds a new value to the Context service and returns the new value's ID.
  // |value_id| can be used to perform updates and to remove the value.
  //
  // This is deprecated in favor of CreateValue() and usage of ContextValueWriter.
  AddValue(ContextValue value) => (string value_id);

  // Like AddValue(), but adds the new value as a child of an existing value.
  // Causes |value| to inherit whatever metadata is set on the value referenced
  // by |parent_id|.
  //
  // This is deprecated in favor of CreateValue() and usage of ContextValueWriter.
  AddChildValue(string parent_id, ContextValue value) => (string value_id);

  // Updates only the metadata for |value_id|.
  //
  // This is deprecated in favor of CreateValue() and usage of ContextValueWriter.
  UpdateMetadata(string value_id, ContextMetadata metadata);

  // Updates only the content for |value_id|.
  //
  // This is deprecated in favor of CreateValue() and usage of ContextValueWriter.
  UpdateContent(string value_id, string content);

  // Updates the value (both the content and the metadata) for |value_id|.
  //
  // This is deprecated in favor of CreateValue() and usage of ContextValueWriter.
  Update(string value_id, ContextValue value);

  // Removes the value specified by |value_id|.
  //
  // This is deprecated in favor of CreateValue() and usage of ContextValueWriter.
  Remove(string value_id);

  // This method is here to make transitioning from topic-based context
  // publishing to CreateValue() easier and will be removed eventually.
  // Internally, calls AddValue() with value.type = ContextValueType.ENTITY,
  // and sets value.meta.entity.topic = topic, unless WriteEntityTopic() was
  // called already on this instance with the same |topic| value. In that case,
  // performs an upate instead of adding a new value.
  //
  // Leaving |value| null removes the topic value from the Context service.
  //
  // TODO(thatguy): Remove this method and replace its behavior with
  // client-side library methods.
  WriteEntityTopic(string topic, string? value);
};

interface ContextValueWriter {
  // Like ContextWriter.CreateValue(), but creates the new value as a child to
  // this value.
  //
  // TODO(thatguy): What is the lifetime relationship between these two values?
  // Ie, does removing the parent remove all its children?
  CreateChildValue(ContextValueWriter& value_writer, ContextValueType type);

  // Updates the content and/or metadata of this value. If either |content| or
  // |metadata| are left null, the existing values will remain.
  Set(string? content, ContextMetadata? metadata);
};
