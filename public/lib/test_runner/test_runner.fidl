// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular.testing;

// This service is included in the ApplicationEnvironment of multi-process tests
// that are launched by the test runner harness. Test processes can connect to
// this service to log failures, signal crashes, and signal completion.
[ServiceName="modular.testing.TestRunner"]
interface TestRunner {
  // Tells the test runner that a particular test case failed, with the supplied
  // message. May be called multiple times. When |Teardown()| is called, the
  // test ends as a failure.
  Fail(string log_message);

  // Either this method or Teardown() must be invoked before closing the
  // connection to this interface; otherwise the TestRunner service will
  // assume that the connection broke due to the test crashing.
  Done();

  // Signals that the test is complete and the entire test harness should torn
  // down. The test will be declared a failure if Fail() was ever called.
  // Otherwise the test will be declared successful.
  Teardown();
};

// This service is included in the ApplicationEnvironment of the test runner
// harness, along with TestRunner. This service represents a key value store
// that multiple process can use to coordinate events. The key value store is
// persistent for the entirety of the test run harness and can be connected to
// from any process. This interface serves multiple clients and its store is a
// monitor; only one operation is serviced at a time.
//
// An example use case:
//
// A module testing the persistence of its 'Ledger' between reinflations can use
// this store to save some state from its previous run, and assert that the
// ledger data it sees in its subsequent runs matches the state saved in this
// key value store.
[ServiceName="modular.testing.TestRunnerStore"]
interface TestRunnerStore {
  // Get() will return the value associated with the |key|. If the |key| doesn't
  // exist, a null value is returned.
  Get(string key) => (string? value);

  // This will store |key| with value |value| and respond back.
  Put(string key, string value) => ();
};