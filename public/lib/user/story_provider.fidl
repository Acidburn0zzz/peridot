// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "apps/modular/services/story/link.fidl";
import "apps/modular/services/user/story_info.fidl";
import "apps/mozart/services/views/view_token.fidl";

// UserRunner implementation creates an instance of this service and
// passes it to the UserShell service so it can operate on stories for
// the user.
//
// If |StoryProvider| is closed, all associated |StoryController|
// instances are closed too. However, running stories are not properly
// stopped, so it's a bad idea to close the story provider connection
// while a story is still running.
interface StoryProvider {
  // Creates a new story running the module at |url|. Gives control
  // over the newly created story through a StoryController. The
  // module won't actually be run until Start() is invoked on the
  // story controller.
  CreateStory(string url, StoryController& story);

  // Deletes an existing story from the list of known stories. Returns
  // when the delete notification is received from the Ledger. If the
  // story deleted is running, it is first stopped and its story
  // controller disconnected. If the story ID doesn't exist, silently
  // does nothing.
  DeleteStory(string story_id) => ();

  // Request detail information on the given story. If the story
  // doesn't exist, returns null.
  GetStoryInfo(string story_id) => (StoryInfo? info);

  // Obtains a controller for a previously run story identified by its
  // story ID. Obtaining the controller doesn't run it yet. If the
  // story doesn't exist, the interface request is closed.
  ResumeStory(string story_id, StoryController& story);

  // Returns IDs of known stories. More information about the stories
  // can be retrieved using GetStoryInfo(), or by ResumeStory(), then
  // StoryController.GetInfo().
  PreviousStories() => (array<string> story_ids);

  // Registers a listener for changes in the story collection.
  Watch(StoryProviderWatcher watcher);
};

// Used by the client of StoryProvider (UserShell) to interact with a
// single story. Created by StoryProvider.
interface StoryController {
  // Gets information associated with the story.
  GetInfo() => (StoryInfo info);

  // Stores extra information associated with the story, like title,
  // color, etc. Available in the |extra| field in the StoryInfo.
  SetInfoExtra(string name, string value) => ();

  // Runs the |Story| controlled by this |StoryController| instance if
  // not yet running, else does nothing. |view_owner| is an interface
  // request for the root view of this story.
  Start(mozart.ViewOwner& view_owner);

  // Gets a connection to the Link to the root module. Only available
  // when the story is running. If requested earlier, gets queued
  // until the story is started.
  GetLink(Link& link);

  // Stops this story if it is running, else does nothing. Returns
  // when the story is stopped.
  Stop() => ();

  // Registers a listener for changes of the story state.
  Watch(StoryWatcher watcher);
};

// To be implemented by clients of StoryController to be notified of
// changes of the Story. NOTE(mesch): TBD what we really want. It's just a
// skeleton right now. Conceivably there could be just one method with
// an updated StoryInfo value as its argument, or each method could
// have such an argument.
interface StoryWatcher {
  // Story starts.
  OnStart();

  // Data is written to the root link.
  OnData();

  // Story stopped after Story.Stop() was called.
  OnStop();

  // Story done by its root module calling Done().
  OnDone();

  // The root module could not be started.
  OnError();
};

// This interface is implemented by clients of StoryProvider.
//
// These calls are for a story event happening on ANY device, not just
// the current device.
//
// No service name: created by the client.
//
// TODO(jimbe) Need a way to determine which device the action happened on.
interface StoryProviderWatcher {
  // The StoryInfo changed. |story_info.state| will be NEW if this story was
  // just created.
  OnChange(StoryInfo story_info);

  // A Story was deleted
  OnDelete(string story_id);
};
