// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "apps/modular/services/story/link.fidl";
import "apps/modular/services/user/story_info.fidl";
import "apps/mozart/services/views/view_token.fidl";

// UserRunner implementation creates an instance of this service and
// passes it to the UserShell service so it can create a new story by
// URL and to get a list of previously run stories which can be
// resumed.
//
// TODO(mesch): If |StoryProvider| is closed, all associated |Story|
// objects will have an undefined behavior. Actually they will crash
// because the user runner impl gets deleted and the story impl still
// accesses it. Apply same pattern as for Story/Module/Link here.
interface StoryProvider {
  // Creates a new story by running the module at |url|. Gives control
  // over the newly created story through a StoryController.
  CreateStory(string url, StoryController& story);

  // Delete an existing story from the list of known stories. Returns when the
  // request has been submitted to the Ledger.
  DeleteStory(string story_id) => ();

  // Request detail information on the given story.
  GetStoryInfo(string story_id) => (StoryInfo info);

  // Obtains a controller for a previously run story identified by its
  // story ID. Obtaining the controller doesn't run it yet.
  ResumeStory(string story_id, StoryController& story);

  // Returns IDs of all previously run stories for the user. More
  // information about the stories can be retrieved using
  // GetStoryInfo(), or by ResumeStoryBy()+StoryController.GetInfo().
  PreviousStories() => (array<string> story_ids);
};

// Used by the client of StoryProvider (UserShell) to interact with a
// single story. Created by StoryProvider.
interface StoryController {
  // Gets all information associated with the story.
  GetInfo() => (StoryInfo info);

  // Stores extra information associated with the story, like title,
  // color, etc. Available in the |extra| field in the StoryInfo.
  SetInfoExtra(string name, string value) => ();

  // Runs the |Story| controlled by this |StoryController| instance if
  // not yet running, else does nothing. |view_owner| is an interface
  // request for the root view of this story.
  Start(mozart.ViewOwner& view_owner);

  // Gets a connection to the Link to the root module. Only available
  // while the story is running, otherwise gets closed.
  GetLink(Link& link);
  
  // Stops this |Story| if it is running, else does nothing. Returns
  // when the story is stopped.
  Stop() => ();

  // Registers a listener for changes of the story state.
  Watch(StoryWatcher watcher);
};

// To be implemented by clients of StoryController to be notified of
// changes of the Story. NOTE(mesch): TBD what we really want. It's just a
// skeleton right now. Conceivably there could be just one method with
// an updated StoryInfo value as its argument, or each method could
// have such an argument.
interface StoryWatcher {
  // Story starts.
  OnStart();

  // Data is written to the root link.
  OnData();

  // Story stopped after Story.Stop() was called.
  OnStop();

  // Story done by its root module calling Done().
  OnDone();

  // The root module could not be started.
  OnError();
};
