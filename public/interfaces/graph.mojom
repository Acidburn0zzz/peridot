// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[DartPackage="modular"]
module modular;

[ServiceName="modular::Graph"]

// The Graph interface allows observations and modifications on a particular
// view of a directed semantic graph.
// TODO(armansito): Add a method for graph queries.
interface Graph {
  // Registers |observer| to receive notifications for mutations on the graph
  // represented by this Graph. Upon successful registration, the observer will
  // receive an initial event with the complete view of the graph.
  // TODO(armansito): Add an additional filter parameter so that observers can
  // observe a subset of the graph that they are interested in.
  AddObserver(GraphObserver observer);

  // Applies each mutation in |mutations| sequentially to the underlying graph.
  // In case of an error, this method returns an error |status| and the graph
  // remains unmodified.
  ApplyMutations(array<GraphMutation> mutations)
      => (Status status, string? errorDescription);

  // TODO(armansito): Add more fine-grained error codes here.
  enum Status {
    SUCCESS = 0,
    NOT_ALLOWED,
    FAILURE,
  };
};

// Interface used by Graph to notify observers of changes to the graph.
interface GraphObserver {
  OnChange(array<GraphMutation> mutations) => ();
};

// Uniquely identifies a list of GraphMutations.
struct GraphEvent {
  array<uint8, 16> id;
  array<GraphMutation> mutations;
};

// Represents the smallest unit of change that can be applied to a graph.
union GraphMutation {
  NodeMutation nodeAdded;
  NodeMutation nodeRemoved;

  EdgeMutation edgeAdded;
  EdgeMutation edgeRemoved;

  NodeValueMutation valueChanged;
};

struct NodeMutation {
  string nodeId;
};

struct EdgeMutation {
  string edgeId;
  string originNodeId;
  string targetNodeId;
  array<string> labels;
};

struct NodeValueMutation {
  string nodeId;
  string key;
  array<uint8>? newValue;
};
